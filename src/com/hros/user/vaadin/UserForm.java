package com.hros.user.vaadin;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hros.bas.domain.DictInfo;
import com.hros.bas.service.BaseService;
import com.hros.bas.service.DictService;
import com.hros.company.dao.CompanyDao;
import com.hros.company.domain.Company;
import com.hros.customer.dao.CustomerDao;
import com.hros.customer.domain.Customer;
import com.hros.user.dao.UserDao;
import com.hros.user.domain.UserInfo;
import com.hros.user.service.UserService;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.data.validator.IntegerValidator;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.Form;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;

public class UserForm extends CustomComponent implements Button.ClickListener{

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Tree tree_managed_companies;
	@AutoGenerated
	private Tree tree_managed_customers;
	@AutoGenerated
	private Tree tree_belongs_department;
	@AutoGenerated
	private VerticalLayout verticalLayout_form;
	@AutoGenerated
	private Form userBeanForm;
	@AutoGenerated
	private VerticalLayout verticalLayout_table;
	@AutoGenerated
	private Table table_user;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private Button button_search_user;
	@AutoGenerated
	private TextField textField_user_name;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_button;
	@AutoGenerated
	private Button button_save_user;
	@AutoGenerated
	private Button button_del;
	@AutoGenerated
	private Button button_add;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 8513909270892979585L;
	

	

	private UserService userService;
	
	private BaseService baseService;
	
	private CompanyDao companyDao;
	
	private CustomerDao customerDao;
	
	private UserDao userDao;
	
	private  DictService dictService;
	
	/**
	 * 在表格中选中的对象
	 */
	private UserInfo selectedUserInfo;
	
	/**
	 * 所属部门
	 */
	private Company belongsTo;
	/**
	 *所管理的公司
	 */
	private Set<Company> managedCompanies;
	
	/**
	 * 所管理的客户
	 */
	private Set<Customer> managedCustomers;
	
	private static final String COMMON_FIELD_WIDTH = "12em";
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UserForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here

		table_user.addListener(new Table.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                // in multiselect mode, a Set of itemIds is returned,
                // in singleselect mode the itemId is returned directly
            	selectedUserInfo = (UserInfo)event.getProperty().getValue();
            	verticalLayout_form.setVisible(true);
            	
            	if(selectedUserInfo != null){
            		//将右边form设为已选中的对象
            		BeanItem<UserInfo> userBeanItem = new BeanItem<UserInfo>(selectedUserInfo);
            		userBeanForm.setItemDataSource(userBeanItem);
            		userBeanForm.setWriteThrough(true);
            		formatUserBeanForm();
            		//将所属部门设为选中状态
            		/*if(selectedUserInfo.getCompID() != 0){
            			Company belongsTo = companyDao.selectCompById(selectedUserInfo.getCompID());
            			tree_belongs_department.setValue(belongsTo);
            		}
					// 将所管理的公司设置为选中状态
					if (selectedUserInfo.getCompsID() != null) {
						Set<Company> managedCompanies = getManangedCompany(selectedUserInfo
								.getCompsID());
						tree_managed_companies.setValue(managedCompanies);
					}
					// 将所管理的客户设置为选中状态
					if (selectedUserInfo.getCustomersID() != null) {
						Set<Customer> manangedCustomers = getManagedCustomer(selectedUserInfo
								.getCustomersID());
						tree_managed_customers.setValue(manangedCustomers);
					}*/
					// 
    			}
            }
        });
		table_user.setSelectable(true);
		table_user.setMultiSelect(false);
		table_user.setImmediate(true); 
		
		tree_belongs_department.addListener(new ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                Tree t = (Tree) event.getProperty();
                // enable if something is selected, returns a set
                belongsTo = (Company)t.getValue();
            }
        });
		
		tree_managed_companies.addListener(new ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                Tree t = (Tree) event.getProperty();
                // enable if something is selected, returns a set
                managedCompanies = (Set<Company>)t.getValue();
            }
        });
		
		tree_managed_customers.addListener(new ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                Tree t = (Tree) event.getProperty();
                // enable if something is selected, returns a set
                managedCustomers = (Set<Customer>)t.getValue();
            }
        });
		
		tree_belongs_department.setMultiSelect(false);
		tree_managed_companies.setMultiSelect(true);
		tree_managed_customers.setMultiSelect(true);
		
		button_add.addListener(this);
		button_del.addListener(this);
		button_save_user.addListener(this);
		button_search_user.addListener(this);
		
		//initialize userBeanForm
		
		
	}
	
	@Override
	public void attach(){
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		userService = (UserService) help.getBean("userServiceImpl");
		companyDao = (CompanyDao)help.getBean("companyDao");
		customerDao = (CustomerDao)help.getBean("customerDao");
		userDao = (UserDao)help.getBean("userDao");
		dictService = (DictService)help.getBean("dictServiceImpl");
		List<UserInfo> allUsers = userDao.selectAllUsers();
		populateUserTable(allUsers);
		//populateCompanyTree();
		//populateCustomers();
		//populateManagedCompanies();
		//populatePositions();
	}
	
	/**
	 * 解析字符串,提取所管理的公司
	 * @param companies
	 * @return
	 */
	private Set<Company> getManangedCompany(String companies){
		Set<Company> managedCompanies = new HashSet<Company>();
		String[] tokens = parseIDs(companies);
		for(String id:tokens){
			Company company = companyDao.selectCompById(Integer.valueOf(id));
			if(company != null){
				managedCompanies.add(company);
			}
		}
		return managedCompanies;
	}
	private String[] parseIDs(String ids){
		String delims = "[,]";
		String[] tokens = ids.split(delims);
		return tokens;
	}
	private Set<Customer> getManagedCustomer(String customers){
		Set<Customer> managedCustomers = new HashSet<Customer>();
		String[] tokens = parseIDs(customers);
		for(String id:tokens){
			Customer customer = customerDao.getCustomerByID(Integer.valueOf(id));
			if(customer != null){
				managedCustomers.add(customer);
			}
		}
		return managedCustomers;
	}
	
	/**
	 * 填充用户列表table
	 */
	private void populateUserTable(List<UserInfo> userInfos){
		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("userName", String.class,null);
		container.addContainerProperty("phone", String.class,null);
		container.addContainerProperty("shortPhone", String.class,null);
		//List<UserInfo> userInfos = userService.selectAllUser();
		for(UserInfo userInfo:userInfos){
			 Item item = container.addItem(userInfo);
			 item.getItemProperty("userName").setValue(userInfo.getUserName());
			 item.getItemProperty("phone").setValue(userInfo.getPhone());
			 item.getItemProperty("shortPhone").setValue(userInfo.getShortPhone());
		}
		
		table_user.setContainerDataSource(container);
		table_user.setColumnHeaders(new String[] { "用户名称","电话号码","短号码"});
		table_user.setVisibleColumns(new String[] { "userName","phone","shortPhone"});
		//table_user.setWidth("300px");
	}
	
	private HierarchicalContainer constructCompanyTreeContainer(){
		List<Company> dataSetList = companyDao.selectAllComp();
		int fItemId = 0;
		HierarchicalContainer companyContainer = new HierarchicalContainer();
		companyContainer.addContainerProperty("name", String.class, null);
		Map<Integer, Company> itemMap = new HashMap<Integer, Company>();
		for (int i = 0; i < dataSetList.size(); i++) {
			Company company = dataSetList.get(i);
			itemMap.put(company.getCompID(), company);
			Item item = companyContainer.addItem(company);
			item.getItemProperty("name").setValue(company.getCompName());
			fItemId = company.getFcompID();
			companyContainer.setChildrenAllowed(company, true);
			if (fItemId != 0) {
				Company parentCompany = itemMap.get(fItemId);
				companyContainer.setChildrenAllowed(parentCompany, true);
				companyContainer.setParent(company, parentCompany);
			}
		}
		return companyContainer;
	}
	
	/**
	 * 填充所属公司/部门的树形结构
	 */
	private void populateCompanyTree(){
		HierarchicalContainer companyContainer = constructCompanyTreeContainer();
		tree_belongs_department.setContainerDataSource(companyContainer);
		
		tree_belongs_department.requestRepaint();
	}
	/**
	 * 构造所管理的客户树
	 * @return
	 */
	private HierarchicalContainer constructCustomerTreeContainer(){
		List<Customer> dataSetList = customerDao.selectAllCustomer();
		int fItemId = 0;
		HierarchicalContainer customerContainer = new HierarchicalContainer();
		customerContainer.addContainerProperty("name", String.class, null);
		Map<Integer, Customer> itemMap = new HashMap<Integer, Customer>();
		for (int i = 0; i < dataSetList.size(); i++) {
			Customer customer = dataSetList.get(i);
			itemMap.put(customer.getCustID(), customer);
			Item item = customerContainer.addItem(customer);
			item.getItemProperty("name").setValue(customer.getCustName());
			fItemId = customer.getfCustID();
			customerContainer.setChildrenAllowed(customer, true);
			if (fItemId != 0) {
				Customer parentCustomer = itemMap.get(fItemId);
				customerContainer.setChildrenAllowed(parentCustomer, true);
				customerContainer.setParent(customer, parentCustomer);
			}
		}
		return customerContainer;
	}
	
	/**
	 * 填充所管理的客户的treetable
	 */
	private void populateCustomers(){
		//myTreeTable_customers
		HierarchicalContainer customerContainer = constructCustomerTreeContainer();
		tree_managed_customers.setContainerDataSource(customerContainer);
		tree_managed_customers.requestRepaint();
		tree_managed_customers.setMultiSelect(true);
	}
	
	/**
	 * 填充说管理的公司的treetable
	 */
	private void populateManagedCompanies(){
		//myTreeTable_managed_comps
		HierarchicalContainer companyContainer = constructCompanyTreeContainer();
		tree_managed_companies.setContainerDataSource(companyContainer);
		tree_managed_companies.requestRepaint();
		tree_managed_companies.setMultiSelect(true);
	}

	/**
	 * 设置user form显示格式
	 */
	private void formatUserBeanForm(){
		userBeanForm.setFormFieldFactory(new UserFieldFactory());
		/*userBeanForm.setVisibleItemProperties(Arrays.asList(new String[] {
                "userName", "userCode", "loginName", "password",
                "identityCard", "address", "phone","shortPhone", 
                 }));*/
		userBeanForm.setVisibleItemProperties(Arrays.asList(new String[] {
                "userName",  "loginName", "password",
                 "address", "phone","shortPhone", 
                 }));
	}
	/**
	 * 填充职位表
	 */
	private IndexedContainer populatePositions() {
		List<DictInfo> positions = dictService.selectDiceByCode("001");
		IndexedContainer container = new IndexedContainer(); 
		container.addContainerProperty("dictName", String.class,null);
		container.addContainerProperty("id", String.class,null);
		//container.addContainerProperty(iso3166_PROPERTY_FLAG, Resource.class,
				//null);
		for (DictInfo dictInfo:positions) {
			String name = dictInfo.getDictName();
			int id = dictInfo.getDictID();
			Item item = container.addItem(id);
			item.getItemProperty("dictName").setValue(name);
			item.getItemProperty("id").setValue(id);

		}

		return container;
	}
	
	private class UserFieldFactory extends DefaultFieldFactory {
		final ComboBox positions = new ComboBox("请选择职位");
		public UserFieldFactory() {
			positions.setWidth(COMMON_FIELD_WIDTH);
			//positions.setContainerDataSource(populatePositions());
			positions.setItemCaptionPropertyId("dictName");
			positions.setFilteringMode(ComboBox.FILTERINGMODE_STARTSWITH);
		}

		@Override
		public Field createField(Item item, Object propertyId,
				Component uiContext) {
			Field f = null;
			if ("posID".equals(propertyId)) {
				return positions;
			} else if ("password".equals(propertyId)) {
				// Create a password field so the password is not shown
				f = createPasswordField(propertyId);
			} else {
				// Use the super class to create a suitable field base on the
				// property type.
				f = super.createField(item, propertyId, uiContext);
			}

			if ("userName".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("用户名");
				tf.setRequired(true);
				tf.setRequiredError("请输入用户名");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"用户名需为1-50个字符", 1, 25, false));
			} else if ("userCode".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("用户编码");
				tf.setRequired(false);
				tf.setRequiredError("请输入用户编码");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"用户编码需为3-50个字符", 3, 50, false));
			} else if ("loginName".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("登录名");
				tf.setRequired(true);
				tf.setRequiredError("请输入登录名");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"登录名需为 3-50 字符", 3, 50, false));
			}else if ("password".equals(propertyId)) {
				PasswordField pf = (PasswordField) f;
				pf.setCaption("密码");
				pf.setRequired(true);
				pf.setRequiredError("请输入密码");
				pf.setWidth("10em");
				pf.addValidator(new StringLengthValidator(
						"密码必须为 6-20 个字符", 6, 20, false));
			} else if ("identityCard".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("身份证号码");
				tf.setRequired(false);
				tf.setRequiredError("请输入身份证号码");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"身份证号码必须为 15-18个字符", 15, 18, false));
			} else if ("address".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("地址");
				tf.setRequired(false);
				tf.setRequiredError("请输入地址");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"地址必须为 3-50个字符", 3, 50, false));
			} else if ("phone".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("电话号码");
				tf.setRequired(true);
				tf.setRequiredError("请输入电话号码");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"电话号码为 3-50个字符", 3, 50, false));
			}else if ("shortPhone".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("短号码");
				tf.setRequired(false);
				tf.setRequiredError("请输入短号码");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new IntegerValidator(
						"短号码需为数字"));
			}else if ("shoesize".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setNullRepresentation("");
				tf.setNullSettingAllowed(true);
				tf.addValidator(new IntegerValidator(
						"Shoe size must be an Integer"));
				tf.setWidth("2em");
			} else if ("uuid".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setWidth("20em");
			}

			return f;
		}

		private PasswordField createPasswordField(Object propertyId) {
			PasswordField pf = new PasswordField();
			pf.setCaption(DefaultFieldFactory
					.createCaptionByPropertyId(propertyId));
			return pf;
		}
	}

	
	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		//添加按钮
		if(event.getSource().equals(this.button_add)){
			UserInfo userInfo = new UserInfo();
			userInfo.setUserName("新用户");
			userService.addUser(userInfo);
			Item item = table_user.getContainerDataSource().addItem(userInfo);
			//将新添加的用户设为选中状态
			table_user.setValue(userInfo);
			item.getItemProperty("userName").setValue(userInfo.getUserName());
			
			//
			BeanItem<UserInfo> userBeanItem = new BeanItem<UserInfo>(userInfo);
			userBeanForm.setItemDataSource(userBeanItem);
			formatUserBeanForm();
			
			table_user.requestRepaint();
			userBeanForm.requestRepaint();
		}
		//删除按钮
		if (event.getSource().equals(button_del)) {
			// 如果未选中任何数据,提示用户
			if (selectedUserInfo == null) {
				getWindow().showNotification("请选择一个用户来删除", "未选择数据");
				return;
			}
			userService.deleteUser(selectedUserInfo.getUserID());
			table_user.getContainerDataSource().removeItem(selectedUserInfo);
			table_user.requestRepaint();
			selectedUserInfo = null;
			verticalLayout_form.setVisible(false);
		}
		//保存按钮
		if (event.getSource().equals(button_save_user)){
			userBeanForm.commit();
			if(belongsTo != null){
				selectedUserInfo.setCompID(belongsTo.getCompID());
			}
			//重新把所管理的公司ID给用户
			if(managedCompanies != null ){
				String managedCompanyIDs = "";
				for(Company company:managedCompanies){
					managedCompanyIDs += company.getCompID()+",";
				}
				selectedUserInfo.setCompsID(managedCompanyIDs);
			}
			if(managedCustomers != null ){
				String managedCustomerIDs = "";
				for(Customer customer:managedCustomers){
					managedCustomerIDs += customer.getCustID();
				}
				selectedUserInfo.setCustomersID(managedCustomerIDs);
			}
			userService.updateUser(selectedUserInfo);
			table_user.requestRepaint();
			getWindow().showNotification("保存成功", "提示");
		}
		//搜索用户
		if (event.getSource().equals(button_search_user)){
			List<UserInfo> searchedUsers = userDao.searchUserByLoginName(textField_user_name.getValue().toString());
			populateUserTable(searchedUsers);
		}
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_table
		verticalLayout_table = buildVerticalLayout_table();
		mainLayout.addComponent(verticalLayout_table);
		
		// verticalLayout_form
		verticalLayout_form = buildVerticalLayout_form();
		mainLayout.addComponent(verticalLayout_form);
		
		// tree_belongs_department
		tree_belongs_department = new Tree();
		tree_belongs_department.setCaption("所属部门");
		tree_belongs_department.setEnabled(false);
		tree_belongs_department.setImmediate(false);
		tree_belongs_department.setVisible(false);
		tree_belongs_department.setWidth("-1px");
		tree_belongs_department.setHeight("-1px");
		mainLayout.addComponent(tree_belongs_department);
		
		// tree_managed_customers
		tree_managed_customers = new Tree();
		tree_managed_customers.setCaption("所管理的客户");
		tree_managed_customers.setEnabled(false);
		tree_managed_customers.setImmediate(false);
		tree_managed_customers.setVisible(false);
		tree_managed_customers.setWidth("-1px");
		tree_managed_customers.setHeight("-1px");
		mainLayout.addComponent(tree_managed_customers);
		
		// tree_managed_companies
		tree_managed_companies = new Tree();
		tree_managed_companies.setCaption("所管理的公司");
		tree_managed_companies.setEnabled(false);
		tree_managed_companies.setImmediate(false);
		tree_managed_companies.setVisible(false);
		tree_managed_companies.setWidth("-1px");
		tree_managed_companies.setHeight("-1px");
		mainLayout.addComponent(tree_managed_companies);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_table() {
		// common part: create layout
		verticalLayout_table = new VerticalLayout();
		verticalLayout_table.setImmediate(false);
		verticalLayout_table.setWidth("-1px");
		verticalLayout_table.setHeight("-1px");
		verticalLayout_table.setMargin(false);
		
		// horizontalLayout_button
		horizontalLayout_button = buildHorizontalLayout_button();
		verticalLayout_table.addComponent(horizontalLayout_button);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		verticalLayout_table.addComponent(horizontalLayout_2);
		
		// table_user
		table_user = new Table();
		table_user.setImmediate(false);
		table_user.setWidth("-1px");
		table_user.setHeight("-1px");
		verticalLayout_table.addComponent(table_user);
		
		return verticalLayout_table;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_button() {
		// common part: create layout
		horizontalLayout_button = new HorizontalLayout();
		horizontalLayout_button.setImmediate(false);
		horizontalLayout_button.setWidth("-1px");
		horizontalLayout_button.setHeight("-1px");
		horizontalLayout_button.setMargin(false);
		
		// button_add
		button_add = new Button();
		button_add.setCaption("新增");
		button_add.setImmediate(true);
		button_add.setWidth("-1px");
		button_add.setHeight("-1px");
		horizontalLayout_button.addComponent(button_add);
		
		// button_del
		button_del = new Button();
		button_del.setCaption("删除");
		button_del.setImmediate(true);
		button_del.setWidth("-1px");
		button_del.setHeight("-1px");
		horizontalLayout_button.addComponent(button_del);
		
		// button_save_user
		button_save_user = new Button();
		button_save_user.setCaption("保存");
		button_save_user.setImmediate(true);
		button_save_user.setWidth("-1px");
		button_save_user.setHeight("-1px");
		horizontalLayout_button.addComponent(button_save_user);
		
		return horizontalLayout_button;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("-1px");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		
		// textField_user_name
		textField_user_name = new TextField();
		textField_user_name.setCaption("请输入用户名");
		textField_user_name.setImmediate(false);
		textField_user_name.setWidth("-1px");
		textField_user_name.setHeight("-1px");
		textField_user_name.setSecret(false);
		horizontalLayout_2.addComponent(textField_user_name);
		
		// button_search_user
		button_search_user = new Button();
		button_search_user.setCaption("搜索用户");
		button_search_user.setImmediate(true);
		button_search_user.setWidth("-1px");
		button_search_user.setHeight("-1px");
		horizontalLayout_2.addComponent(button_search_user);
		horizontalLayout_2.setComponentAlignment(button_search_user,
				new Alignment(24));
		
		return horizontalLayout_2;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_form() {
		// common part: create layout
		verticalLayout_form = new VerticalLayout();
		verticalLayout_form.setImmediate(false);
		verticalLayout_form.setWidth("-1px");
		verticalLayout_form.setHeight("-1px");
		verticalLayout_form.setMargin(false);
		
		// userBeanForm
		userBeanForm = new Form();
		userBeanForm.setImmediate(false);
		userBeanForm.setWidth("250px");
		userBeanForm.setHeight("-1px");
		verticalLayout_form.addComponent(userBeanForm);
		
		return verticalLayout_form;
	}

}
