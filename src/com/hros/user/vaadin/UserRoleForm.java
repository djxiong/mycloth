package com.hros.user.vaadin;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import com.hros.user.domain.RoleInfo;
import com.hros.user.domain.UserInfo;
import com.hros.user.service.UserService;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

public class UserRoleForm extends CustomComponent implements
		Button.ClickListener {

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_role;
	@AutoGenerated
	private Table table_roles;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_button;
	@AutoGenerated
	private Button button_save_assigns;
	@AutoGenerated
	private VerticalLayout verticalLayout_user;
	@AutoGenerated
	private Table table_users;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 选中的用户
	 */
	private UserInfo selectedUserInfo;

	private Set<RoleInfo> selectedRoleInfos;

	private UserService userService;
	
	List<RoleInfo> assignedRoleInfos ;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public UserRoleForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// 角色表格
		table_roles.addListener(new Table.ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				// in multiselect mode, a Set of itemIds is returned,
				// in singleselect mode the itemId is returned directly
				
				selectedRoleInfos = (Set<RoleInfo>) event.getProperty()
						.getValue();
				
				
			}
		});
		table_roles.setSelectable(true);
		table_roles.setMultiSelect(true);
		table_roles.setImmediate(true);
		

		// 用户表格
		table_users.addListener(new Table.ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				// in multiselect mode, a Set of itemIds is returned,
				// in singleselect mode the itemId is returned directly
				
				selectedUserInfo = (UserInfo) event.getProperty().getValue();
				if (selectedUserInfo == null) {
					return;
				}
				// 将已授权的角色标记为选中状态
				assignedRoleInfos = userService.selectRolesForUser2(selectedUserInfo.getUserID());
				table_roles.setValue(assignedRoleInfos);		
			}
		});
		
		table_users.setSelectable(true);
		table_users.setMultiSelect(false);
		table_users.setImmediate(true);

		button_save_assigns.addListener(this);
	}

	@Override
	public void attach() {
		super.attach();
		SpringContextHelper help = new SpringContextHelper(
				this.getApplication());
		userService = (UserService) help.getBean("userServiceImpl");

		populateRoles();
		populateUsers();
	}

	private void populateUsers() {
		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("userName", String.class, null);
		List<UserInfo> users = userService.selectAllUser();
		for (UserInfo user : users) {
			Item item = container.addItem(user);
			item.getItemProperty("userName").setValue(user.getUserName());

		}

		table_users.setContainerDataSource(container);
		table_users.setColumnHeaders(new String[] { "用户名称" });
		table_users.setVisibleColumns(new String[] { "userName" });
		table_users.setWidth("300px");
	}

	private void populateRoles() {
		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("roleName", String.class, null);

		List<RoleInfo> roleInfos = userService.selectAllRoles();
		for (RoleInfo roleInfo : roleInfos) {
			Item item = container.addItem(roleInfo);
			item.getItemProperty("roleName").setValue(roleInfo.getRoleName());
		}

		table_roles.setContainerDataSource(container);
		table_roles.setColumnHeaders(new String[] { "角色名称" });
		table_roles.setVisibleColumns(new String[] { "roleName" });
		table_roles.setWidth("300px");
	}

	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub

		// 保存授权按钮
		if (event.getSource().equals(button_save_assigns)) {
			// 如果未选中任何数据,提示用户
			if (selectedUserInfo == null) {
				getWindow().showNotification("请选择一个用户来操作", "未选择数据");
				return;
			}
			
			//遍历,查找该为本角色删除的用户
			List<RoleInfo> toDeleteRoles = new ArrayList<RoleInfo>();
			for(RoleInfo roleInfo:assignedRoleInfos){
				if(!selectedRoleInfos.contains(roleInfo)){
					toDeleteRoles.add(roleInfo);
				}
			}
			userService.deleteRolesForUser(selectedUserInfo.getUserID(), toDeleteRoles);
			//遍历,查找该为本角色添加的用户
			List<RoleInfo> toAddRoles = new ArrayList<RoleInfo>();
			for(RoleInfo roleInfo:selectedRoleInfos){
				if(!assignedRoleInfos.contains(roleInfo)){
					toAddRoles.add(roleInfo);
				}
			}
			userService.addRolesForUser(selectedUserInfo.getUserID(), toAddRoles);
			
			getWindow().showNotification("操作成功", "提示");
		}
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_user
		verticalLayout_user = buildVerticalLayout_user();
		mainLayout.addComponent(verticalLayout_user);
		
		// verticalLayout_role
		verticalLayout_role = buildVerticalLayout_role();
		mainLayout.addComponent(verticalLayout_role);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_user() {
		// common part: create layout
		verticalLayout_user = new VerticalLayout();
		verticalLayout_user.setImmediate(false);
		verticalLayout_user.setWidth("-1px");
		verticalLayout_user.setHeight("-1px");
		verticalLayout_user.setMargin(false);
		
		// table_users
		table_users = new Table();
		table_users.setImmediate(false);
		table_users.setWidth("-1px");
		table_users.setHeight("-1px");
		verticalLayout_user.addComponent(table_users);
		
		return verticalLayout_user;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_role() {
		// common part: create layout
		verticalLayout_role = new VerticalLayout();
		verticalLayout_role.setImmediate(false);
		verticalLayout_role.setWidth("-1px");
		verticalLayout_role.setHeight("-1px");
		verticalLayout_role.setMargin(false);
		
		// horizontalLayout_button
		horizontalLayout_button = buildHorizontalLayout_button();
		verticalLayout_role.addComponent(horizontalLayout_button);
		
		// table_roles
		table_roles = new Table();
		table_roles.setImmediate(false);
		table_roles.setWidth("-1px");
		table_roles.setHeight("-1px");
		verticalLayout_role.addComponent(table_roles);
		
		return verticalLayout_role;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_button() {
		// common part: create layout
		horizontalLayout_button = new HorizontalLayout();
		horizontalLayout_button.setImmediate(false);
		horizontalLayout_button.setWidth("-1px");
		horizontalLayout_button.setHeight("-1px");
		horizontalLayout_button.setMargin(false);
		
		// button_save_assigns
		button_save_assigns = new Button();
		button_save_assigns.setCaption("保存");
		button_save_assigns.setImmediate(true);
		button_save_assigns.setWidth("-1px");
		button_save_assigns.setHeight("-1px");
		horizontalLayout_button.addComponent(button_save_assigns);
		
		return horizontalLayout_button;
	}

}
