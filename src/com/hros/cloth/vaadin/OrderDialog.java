package com.hros.cloth.vaadin;

import com.hros.cloth.domain.Cloth;
import com.hros.cloth.domain.Customer2;
import com.hros.cloth.service.ClothService;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.validator.DoubleValidator;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.Notification;

public class OrderDialog extends CustomComponent implements Button.ClickListener{

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Button button_ok;
	@AutoGenerated
	private TextField textField_price;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private Cloth selectedCloth;
	private Customer2 selectedCustomer;
	private ClothService clothService;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OrderDialog(Cloth selectedCloth,Customer2 selectedCustomer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.selectedCloth = selectedCloth;
		this.selectedCustomer = selectedCustomer;
		
		button_ok.addListener(this);
	}
	
	@Override
	public void attach(){
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		clothService = (ClothService) help.getBean("clothServiceImpl");
		
		populateTextPrice();
		//populateUsers();
	}
	
	private void populateTextPrice(){
		textField_price.setValue(selectedCloth.getRealPrice());
		textField_price.addValidator(new DoubleValidator(
				"折数需为数字"));
	}
	
	@Override
	public void buttonClick(ClickEvent event) {
		Float realPrice = Float.valueOf(textField_price.getValue().toString());
		clothService.orderCloth(selectedCloth, selectedCustomer,realPrice);
		//更新衣服数量
		//table_cloth.getContainerDataSource().getItem(selectedCloth).getItemProperty("count").setValue(selectedCloth.getCount());
		//table_cloth.requestRepaint();
		String customerName = null;
		if(selectedCustomer == null){
			customerName = "匿名人士";
		}
		else{
			customerName = selectedCustomer.getName();
		}
		getWindow().getParent().showNotification("客户 "+ customerName+" 购买成功, 应付款金额为:"+textField_price.getValue(), "提示",Notification.TYPE_ERROR_MESSAGE);
	
		Window window = (Window)this.getWindow();
		window.getParent().removeWindow(window);
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// textField_price
		textField_price = new TextField();
		textField_price.setCaption("请输入实际售价");
		textField_price.setImmediate(false);
		textField_price.setWidth("-1px");
		textField_price.setHeight("-1px");
		textField_price.setSecret(false);
		mainLayout.addComponent(textField_price);
		mainLayout.setComponentAlignment(textField_price, new Alignment(48));
		
		// button_ok
		button_ok = new Button();
		button_ok.setCaption("确认");
		button_ok.setImmediate(false);
		button_ok.setWidth("-1px");
		button_ok.setHeight("-1px");
		mainLayout.addComponent(button_ok);
		mainLayout.setComponentAlignment(button_ok, new Alignment(48));
		
		return mainLayout;
	}

}
