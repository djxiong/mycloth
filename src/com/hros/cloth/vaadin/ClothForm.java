package com.hros.cloth.vaadin;

import java.awt.Color;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import com.hros.cloth.dao.ClothDao;
import com.hros.cloth.dao.Customer2Dao;
import com.hros.cloth.dao.OrderHistoryDao;
import com.hros.cloth.domain.Cloth;
import com.hros.cloth.domain.OrderHistory;
import com.hros.cloth.service.ClothService;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.addon.colorpicker.ColorPicker;
import com.vaadin.addon.colorpicker.events.ColorChangeEvent;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.data.validator.DoubleValidator;
import com.vaadin.data.validator.IntegerValidator;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.Form;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.Notification;

public class ClothForm extends CustomComponent implements Button.ClickListener{

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_form;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_form_buttons;
	@AutoGenerated
	private Button button_save_cloth;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_3;
	@AutoGenerated
	private ColorPicker colorPicker_coloth;
	@AutoGenerated
	private Label label_color;
	@AutoGenerated
	private Form clothBeanForm;
	@AutoGenerated
	private VerticalLayout verticalLayout_table;
	@AutoGenerated
	private Table table_cloth;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private Button button_search_cloth;
	@AutoGenerated
	private TextField textField_bar_code;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_button;
	@AutoGenerated
	private Button button_del_cloth;
	@AutoGenerated
	private Button button_return_cloth;
	@AutoGenerated
	private Button button_add_cloth;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private ClothDao clothDao;
	private Customer2Dao customerDao;
	private OrderHistoryDao orderHistoryDao;
	private ClothService clothService;
	
	private static final String COMMON_FIELD_WIDTH = "12em";
	
	private Cloth selectedCloth;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ClothForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		table_cloth.addListener(new Table.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                // in multiselect mode, a Set of itemIds is returned,
                // in singleselect mode the itemId is returned directly
            	selectedCloth = (Cloth)event.getProperty().getValue();
            	//将已授权的菜单标记为选中状态
            	if(selectedCloth != null){
            		BeanItem<Cloth> userBeanItem = new BeanItem<Cloth>(selectedCloth);
            		clothBeanForm.setItemDataSource(userBeanItem);
            		clothBeanForm.setWriteThrough(true);
            		formatClothBeanForm();
            		Color color = new Color(selectedCloth.getColor());
            		colorPicker_coloth.setColor(color);
    			}
            }
        });
		table_cloth.setSelectable(true);
		table_cloth.setMultiSelect(false);
		table_cloth.setImmediate(true); 
		
		colorPicker_coloth.addListener(new ColorPicker.ColorChangeListener() {
			@Override
			public void colorChanged(ColorChangeEvent event) {
				if(selectedCloth != null){
					selectedCloth.setColor(event.getColor().getRGB());
				}
			}
		});
		//colorPicker_coloth.setButtonCaption("请选择衣服颜色");
		colorPicker_coloth.setHSVVisibility(false);
		colorPicker_coloth.setRGBVisibility(false);
		//colorPicker_coloth.setCaption("请选择衣服颜色");
		//colorPicker_coloth.
		
		button_add_cloth.addListener(this);
		button_del_cloth.addListener(this);
		button_save_cloth.addListener(this);
		button_search_cloth.addListener(this);
		button_return_cloth.addListener(this);
	}

	@Override
	public void attach(){
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		clothService = (ClothService) help.getBean("clothServiceImpl");
		clothDao = (ClothDao)help.getBean("clothDao");
		orderHistoryDao = (OrderHistoryDao) help.getBean("orderHistoryDao");
		List<Cloth> clothes = clothDao.getAllClothes();
		populateClothes(clothes);
		//populateUsers();
	}
	
	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		//搜索服装按钮
		//根据条形码搜索服装按钮
		if (event.getSource().equals(button_search_cloth)) {
			String barCode = textField_bar_code.getValue().toString();
			List<Cloth> foundCloths = clothDao.findClothsByBarCode(barCode);
			populateClothes(foundCloths);
		}
		//进货按钮
		if(event.getSource().equals(button_add_cloth)){
			Cloth cloth = new Cloth();
			cloth.setName("新建");
			cloth.setStockDate(new Date());
			clothDao.insertCloth(cloth);
			Item item = table_cloth.getContainerDataSource().addItem(cloth);
			table_cloth.setValue(cloth);
			item.getItemProperty("name").setValue(cloth.getName());
			//table_cloth.setEditable(true);
			
			BeanItem<Cloth> userBeanItem = new BeanItem<Cloth>(cloth);
			clothBeanForm.setItemDataSource(userBeanItem);
			formatClothBeanForm();
		}
		//删除按钮
		if(event.getSource().equals(button_del_cloth)){
			// 如果未选中任何数据,提示用户
			if(selectedCloth == null ){
				getWindow().showNotification("请选择服装来删除" ,"未选择数据",Notification.TYPE_ERROR_MESSAGE);
				return;
			}
			//如果已售出,则不能删除
			List<OrderHistory> soldCloth = orderHistoryDao.findOrderHistoryByClothID(selectedCloth.getClothID());
			if(soldCloth != null && soldCloth.size() > 0){
				getWindow().showNotification("该服装已售出,为了维护销售记录,不能删除此服装" ,"提示",Notification.TYPE_HUMANIZED_MESSAGE);
				return;
			}
			
			clothDao.deleteCloth(selectedCloth.getClothID());
			table_cloth.getContainerDataSource().removeItem(selectedCloth);
			table_cloth.requestRepaint();
			getWindow().showNotification("删除成功" ,"提示",Notification.TYPE_HUMANIZED_MESSAGE);
			selectedCloth = null;
		}
		//退货
		if(event.getSource().equals(button_return_cloth)){
			// 如果未选中任何数据,提示用户
			if(selectedCloth == null ){
				getWindow().showNotification("请选择一款服装来退货" ,"未选择数据",Notification.TYPE_ERROR_MESSAGE);
				return;
			}
			clothBeanForm.getItemProperty("");
			//弹出一个对话框来退货
			Window subWindow = new Window();
			subWindow.setModal(true);
			subWindow.setWidth("300px");
			ReturnClothDialog returnClothDialog = new ReturnClothDialog();
			returnClothDialog.setCloth(selectedCloth);
			subWindow.addComponent(returnClothDialog);
			getWindow().addWindow(subWindow);
		}
		
		//保存按钮
		if(event.getSource().equals(button_save_cloth)){
			try{
				clothBeanForm.commit();
			}catch(Exception e){
				e.printStackTrace();
				return;
			}
			clothDao.updateCloth(selectedCloth);
			//table_cloth.setEditable(false);
			table_cloth.getContainerDataSource().getItem(selectedCloth).getItemProperty("name").setValue(selectedCloth.getName());
			table_cloth.requestRepaint();
			getWindow().showNotification("成功保存 "+selectedCloth.getName(), "提示");
		}
		
	}	
	private void populateClothes(List<Cloth> clothes){
		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("name", String.class,null);
		
		for(Cloth cloth:clothes){
			 Item item = container.addItem(cloth);
			 item.getItemProperty("name").setValue(cloth.getName());
			 
		}
		
		table_cloth.setContainerDataSource(container);
		table_cloth.setColumnHeaders(new String[] { "名称"});
		table_cloth.setVisibleColumns(new String[] { "name"});
		table_cloth.setWidth("300px");
	}
	
	
	/**
	 * 设置user form显示格式
	 */
	private void formatClothBeanForm(){
		clothBeanForm.setFormFieldFactory(new ClothFieldFactory());
		clothBeanForm.setVisibleItemProperties(Arrays.asList(new String[] {
                "name", "size",  "barCode",
                "count", "salesOffType", "salesOff","originalPrice", 
                "price", "stockDate"}));
		
	}
	
	private IndexedContainer populateSizes() {
		
		IndexedContainer container = new IndexedContainer(); 
		container.addContainerProperty("name", String.class,null);
		container.addContainerProperty("id", String.class,null);
		//container.addContainerProperty(iso3166_PROPERTY_FLAG, Resource.class,
				//null);
		for (int i = 0; i < ClothUtil.sizes.length; i++) {
			String name = ClothUtil.sizes[i++];
			String id = ClothUtil.sizes[i];
			Item item = container.addItem(id);
			item.getItemProperty("name").setValue(name);
			item.getItemProperty("id").setValue(id);
			//item.getItemProperty(iso3166_PROPERTY_FLAG).setValue(
					//new ThemeResource("../sampler/flags/" + id.toLowerCase()
							//+ ".gif"));
		}
		//container.sort(new Object[] { iso3166_PROPERTY_NAME },
				//new boolean[] { true });
		return container;
	}
	private IndexedContainer populateSalesOffType() {
		
		IndexedContainer container = new IndexedContainer(); 
		container.addContainerProperty("name", String.class,null);
		container.addContainerProperty("id", String.class,null);
		//container.addContainerProperty(iso3166_PROPERTY_FLAG, Resource.class,
				//null);
		for (int i = 0; i < ClothUtil.salesOffType.length; i++) {
			String name = ClothUtil.salesOffType[i++];
			String id = ClothUtil.salesOffType[i];
			Item item = container.addItem(id);
			item.getItemProperty("name").setValue(name);
			item.getItemProperty("id").setValue(id);

		}

		return container;
	}
	
	private class ClothFieldFactory extends DefaultFieldFactory {
		final ComboBox sizes = new ComboBox("请选择尺寸");
		final ComboBox salesOffType = new ComboBox("请选择折扣类型");
		public ClothFieldFactory() {
			sizes.setWidth(COMMON_FIELD_WIDTH);
			sizes.setContainerDataSource(populateSizes());
			sizes.setItemCaptionPropertyId("name");
			//sizes.setItemIconPropertyId(ExampleUtil.iso3166_PROPERTY_FLAG);
			sizes.setFilteringMode(ComboBox.FILTERINGMODE_STARTSWITH);
			
			salesOffType.setWidth(COMMON_FIELD_WIDTH);
			salesOffType.setContainerDataSource(populateSalesOffType());
			salesOffType.setItemCaptionPropertyId("name");
			//sizes.setItemIconPropertyId(ExampleUtil.iso3166_PROPERTY_FLAG);
			salesOffType.setFilteringMode(ComboBox.FILTERINGMODE_STARTSWITH);
		}

		@Override
		public Field createField(Item item, Object propertyId,
				Component uiContext) {
			Field f = null;
			/*if ("size".equals(propertyId)) {
				// filtering ComboBox w/ country names
				//return sizes;
			}else */if ("salesOffType".equals(propertyId)) {
				return salesOffType;
			} else if ("password".equals(propertyId)) {
				// Create a password field so the password is not shown
				f = createPasswordField(propertyId);
			} else {
				// Use the super class to create a suitable field base on the
				// property type.
				f = super.createField(item, propertyId, uiContext);
			}
			//clothID,name,size,color,barCode,count,salesOffType,salesOff,originalPrice,price,stockDate
			if ("name".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("名称");
				tf.setRequired(true);
				tf.setRequiredError("请输入名称");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"名称需为1-25个字符", 1, 25, false));
			}else if ("size".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("尺寸");
				tf.setRequired(false);
				tf.setRequiredError("请输入尺寸");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"尺寸需为 1-50 字符", 1, 50, false));
			}else if ("barCode".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("条形码");
				tf.setRequired(true);
				tf.setRequiredError("请输入条形码");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"条形码需为 3-50 字符", 3, 50, false));
			}else if ("barCode2".equals(propertyId)) {
				PasswordField pf = (PasswordField) f;
				pf.setCaption("条形码");
				pf.setRequired(false);
				pf.setRequiredError("请输入条形码");
				pf.setWidth("10em");
				pf.addValidator(new StringLengthValidator(
						"条形码必须为 6-20 个字符", 6, 20, false));
			} else if ("count".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("数量");
				tf.setRequired(true);
				tf.setRequiredError("请输入数量");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new IntegerValidator(
						"数量需为数字"));
			}  else if ("salesOff".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("降价金额或折数");
				tf.setRequired(false);
				tf.setRequiredError("输入降价金额或折数");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new DoubleValidator(
						"折数需为数字"));
			}else if ("originalPrice".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("进价");
				tf.setRequired(true);
				tf.setRequiredError("请输入进价");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new DoubleValidator(
						"进价需为数字"));
			}else if ("price".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("吊牌价");
				tf.setRequired(true);
				tf.setRequiredError("请输入吊牌价");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new DoubleValidator(
						"吊牌价需为数字"));
			}else if ("shoesize".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setNullRepresentation("");
				tf.setNullSettingAllowed(true);
				tf.addValidator(new IntegerValidator(
						"Shoe size must be an Integer"));
				tf.setWidth("2em");
			} else if ("uuid".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setWidth("20em");
			}

			return f;
		}

		private PasswordField createPasswordField(Object propertyId) {
			PasswordField pf = new PasswordField();
			pf.setCaption(DefaultFieldFactory
					.createCaptionByPropertyId(propertyId));
			return pf;
		}
	}

	
		
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_table
		verticalLayout_table = buildVerticalLayout_table();
		mainLayout.addComponent(verticalLayout_table);
		
		// verticalLayout_form
		verticalLayout_form = buildVerticalLayout_form();
		mainLayout.addComponent(verticalLayout_form);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_table() {
		// common part: create layout
		verticalLayout_table = new VerticalLayout();
		verticalLayout_table.setImmediate(false);
		verticalLayout_table.setWidth("-1px");
		verticalLayout_table.setHeight("-1px");
		verticalLayout_table.setMargin(false);
		
		// horizontalLayout_button
		horizontalLayout_button = buildHorizontalLayout_button();
		verticalLayout_table.addComponent(horizontalLayout_button);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		verticalLayout_table.addComponent(horizontalLayout_2);
		
		// table_cloth
		table_cloth = new Table();
		table_cloth.setImmediate(false);
		table_cloth.setWidth("-1px");
		table_cloth.setHeight("-1px");
		verticalLayout_table.addComponent(table_cloth);
		
		return verticalLayout_table;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_button() {
		// common part: create layout
		horizontalLayout_button = new HorizontalLayout();
		horizontalLayout_button.setImmediate(false);
		horizontalLayout_button.setWidth("-1px");
		horizontalLayout_button.setHeight("-1px");
		horizontalLayout_button.setMargin(false);
		
		// button_add_cloth
		button_add_cloth = new Button();
		button_add_cloth.setCaption("新增");
		button_add_cloth.setImmediate(true);
		button_add_cloth.setWidth("-1px");
		button_add_cloth.setHeight("-1px");
		horizontalLayout_button.addComponent(button_add_cloth);
		
		// button_return_cloth
		button_return_cloth = new Button();
		button_return_cloth.setCaption("退货");
		button_return_cloth.setImmediate(true);
		button_return_cloth.setWidth("-1px");
		button_return_cloth.setHeight("-1px");
		horizontalLayout_button.addComponent(button_return_cloth);
		
		// button_del_cloth
		button_del_cloth = new Button();
		button_del_cloth.setCaption("删除");
		button_del_cloth.setImmediate(true);
		button_del_cloth.setWidth("-1px");
		button_del_cloth.setHeight("-1px");
		horizontalLayout_button.addComponent(button_del_cloth);
		
		return horizontalLayout_button;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("-1px");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		
		// textField_bar_code
		textField_bar_code = new TextField();
		textField_bar_code.setCaption("条形码");
		textField_bar_code.setImmediate(false);
		textField_bar_code.setWidth("-1px");
		textField_bar_code.setHeight("-1px");
		textField_bar_code.setSecret(false);
		horizontalLayout_2.addComponent(textField_bar_code);
		
		// button_search_cloth
		button_search_cloth = new Button();
		button_search_cloth.setCaption("搜索");
		button_search_cloth.setImmediate(true);
		button_search_cloth.setWidth("-1px");
		button_search_cloth.setHeight("-1px");
		horizontalLayout_2.addComponent(button_search_cloth);
		horizontalLayout_2.setComponentAlignment(button_search_cloth,
				new Alignment(24));
		
		return horizontalLayout_2;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_form() {
		// common part: create layout
		verticalLayout_form = new VerticalLayout();
		verticalLayout_form.setImmediate(false);
		verticalLayout_form.setWidth("-1px");
		verticalLayout_form.setHeight("-1px");
		verticalLayout_form.setMargin(false);
		
		// clothBeanForm
		clothBeanForm = new Form();
		clothBeanForm.setImmediate(false);
		clothBeanForm.setWidth("400px");
		clothBeanForm.setHeight("-1px");
		verticalLayout_form.addComponent(clothBeanForm);
		
		// horizontalLayout_3
		horizontalLayout_3 = buildHorizontalLayout_3();
		verticalLayout_form.addComponent(horizontalLayout_3);
		verticalLayout_form.setComponentAlignment(horizontalLayout_3,
				new Alignment(20));
		
		// horizontalLayout_form_buttons
		horizontalLayout_form_buttons = buildHorizontalLayout_form_buttons();
		verticalLayout_form.addComponent(horizontalLayout_form_buttons);
		
		return verticalLayout_form;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_3() {
		// common part: create layout
		horizontalLayout_3 = new HorizontalLayout();
		horizontalLayout_3.setImmediate(false);
		horizontalLayout_3.setWidth("-1px");
		horizontalLayout_3.setHeight("-1px");
		horizontalLayout_3.setMargin(false);
		
		// label_color
		label_color = new Label();
		label_color.setImmediate(false);
		label_color.setWidth("-1px");
		label_color.setHeight("-1px");
		label_color.setValue("颜色");
		horizontalLayout_3.addComponent(label_color);
		
		// colorPicker_coloth
		colorPicker_coloth = new ColorPicker();
		colorPicker_coloth.setImmediate(false);
		colorPicker_coloth.setWidth("-1px");
		colorPicker_coloth.setHeight("-1px");
		horizontalLayout_3.addComponent(colorPicker_coloth);
		horizontalLayout_3.setComponentAlignment(colorPicker_coloth,
				new Alignment(6));
		
		return horizontalLayout_3;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_form_buttons() {
		// common part: create layout
		horizontalLayout_form_buttons = new HorizontalLayout();
		horizontalLayout_form_buttons.setImmediate(false);
		horizontalLayout_form_buttons.setWidth("-1px");
		horizontalLayout_form_buttons.setHeight("-1px");
		horizontalLayout_form_buttons.setMargin(false);
		
		// button_save_cloth
		button_save_cloth = new Button();
		button_save_cloth.setCaption("保存");
		button_save_cloth.setImmediate(true);
		button_save_cloth.setWidth("-1px");
		button_save_cloth.setHeight("-1px");
		horizontalLayout_form_buttons.addComponent(button_save_cloth);
		horizontalLayout_form_buttons.setComponentAlignment(button_save_cloth,
				new Alignment(6));
		
		return horizontalLayout_form_buttons;
	}

}
