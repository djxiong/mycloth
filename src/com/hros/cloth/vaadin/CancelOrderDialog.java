package com.hros.cloth.vaadin;

import java.text.DateFormat;
import java.util.Date;
import java.util.Map;

import com.hros.cloth.dao.ClothDao;
import com.hros.cloth.dao.Customer2Dao;
import com.hros.cloth.dao.OrderHistoryDao;
import com.hros.cloth.domain.Cloth;
import com.hros.cloth.domain.Customer2;
import com.hros.cloth.domain.OrderHistory;
import com.hros.cloth.service.ClothService;
import com.hros.customer.dao.CustomerDao;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Table;

public class CancelOrderDialog extends CustomComponent implements Button.ClickListener{

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Button button_cancel;
	@AutoGenerated
	private Button button_ok;
	@AutoGenerated
	private TextField textField_price_diff;
	@AutoGenerated
	private OptionGroup optionGroup_1;
	@AutoGenerated
	private Label label_message;



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	String[] optionItems = new String[]{"DO_NOTHING","DIFF"};
	private Map<String,Object> parameters;
	private ClothDao clothDao; 
	private Customer2Dao customerDao;
	private ClothService clothService;
	//传table过来更新数量
	private Table table_cloth; 
	private Table table_consume; 
	
	public static final String PARAMETER_CONSUME="CONSUME";
	public static final String PARAMETER_PRICE_DIFF="PRICE_DIFF";
	public static final String PARAMETER_PRICE_ORIG="PRICE_ORIG";
	public static final String PARAMETER_PRICE_CURRENT="PRICE_CURRENT";
	public static final String PARAMETER_ACTION_RESULT="ACTION_RESULT";
	public static final String PARAMETER_SELECTED_ORDER="SELECTED_ORDER";
	public static final String PARAMETER_SELECTED_CLOTH="SELECTED_CLOTH";
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CancelOrderDialog() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		optionGroup_1.setNullSelectionAllowed(false);
		//optionGroup_1.setit
		button_ok.addListener(this);
		button_cancel.addListener(this);
	}
	
	
	
	@Override
	public void attach(){
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		clothDao = (ClothDao)help.getBean("clothDao");
		customerDao = (Customer2Dao)help.getBean("customer2Dao");
		clothService = (ClothService)help.getBean("clothServiceImpl");
		populateOptionGroup();
	}
	
	private void populateOptionGroup(){
		for(String item:optionItems){
			optionGroup_1.addItem(item);
		}
		optionGroup_1.select(optionItems[0]);
		optionGroup_1.setItemCaption(optionItems[0], "保持与购买时相同,不作处理");
		optionGroup_1.setItemCaption(optionItems[1], "补差价,负数表示找钱给顾客");
	}
	
	@Override
	public void buttonClick(ClickEvent event) {
		if(event.getSource().equals(button_cancel)){
			
			closeWindow();
		}
		if(event.getSource().equals(button_ok)){
			Cloth selectedCloth = (Cloth)parameters.get(PARAMETER_SELECTED_CLOTH);
			OrderHistory selectedOrder = (OrderHistory)parameters.get(PARAMETER_SELECTED_ORDER);
			
			Float consume = 0F;
			String selectedOption = optionGroup_1.getValue().toString();
			//DO_NOTHING
			if(selectedOption.equalsIgnoreCase(optionItems[0])){
				consume = 0F;
			}
			else{
				consume = Float.valueOf(textField_price_diff.getValue().toString());
			}
			OrderHistory newOrder = clothService.cancelOrder(selectedOrder, selectedCloth, consume);
			//table_cloth.getContainerDataSource().getItem(selectedCloth).getItemProperty("count").setValue(selectedCloth.getCount());
			//如果原先购买的衣服在列表中,也更新其数量
			/*Cloth boughtCloth = null;
			if(selectedOrder != null){
        		boughtCloth = clothDao.getClothByID(selectedOrder.getClothID());
        		Item boughtItem = table_cloth.getContainerDataSource().getItem(boughtCloth);
    			if(boughtItem != null){
    				boughtItem.getItemProperty("count").setValue(boughtCloth.getCount());
    			}
        	}*/
			// 添加一个项到订单历史中
			Item item = table_consume.getContainerDataSource().addItem(newOrder);
			 if(newOrder.getCustomerID() != null && newOrder.getCustomerID() != 0){
				 Customer2 customer = customerDao.getCustomerByID(newOrder.getCustomerID());
				 item.getItemProperty("customerName").setValue(customer.getName());
			 }
			 else{
				 item.getItemProperty("customerName").setValue("匿名人氏");
			 }
			 
			item.getItemProperty("cloth").setValue(selectedCloth.getName());
			 DateFormat dateFormatter = DateFormat.getDateInstance(DateFormat.SHORT);
			 String consumeDate = dateFormatter.format(newOrder.getConsumeDate());
			 item.getItemProperty("date").setValue(consumeDate);
			 item.getItemProperty("consume").setValue(newOrder.getConsumption());
			 item.getItemProperty("consumeType").setValue("换货");
		
			getWindow().getParent().showNotification("换货成功 ", "提示");
			closeWindow();
			
		}
	}
	
	private void closeWindow(){
		Window window = (Window)this.getWindow();
		window.getParent().removeWindow(window);
	}
	public void setMessage(String message){
		label_message.setValue(message);
	}
	
	public void setParameters(Map<String,Object> parameters){
		this.parameters = parameters;
		String message = "顾客之前购买此衣服消费了:"+parameters.get(PARAMETER_PRICE_ORIG)+
				",\n换购的新衣服价格为:"+parameters.get(PARAMETER_PRICE_CURRENT)+
				",\n差价为:"+parameters.get(PARAMETER_PRICE_DIFF);
		label_message.setValue(message);
		textField_price_diff.setValue(parameters.get(PARAMETER_PRICE_DIFF));
		//String option_auto_str = "自动补齐差价:"+parameters.get(PARAMETER_PRICE_DIFF);
		//optionGroup_1.setItemCaption(optionItems[1], option_auto_str);
	}
	
	public Map<String,Object> getParameters(){
		return this.parameters;
	}
	
	public void setTable(Table table){
		this.table_cloth = table;
	}
	
	public void setTable_Consume(Table table){
		this.table_consume = table;
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// label_message
		label_message = new Label();
		label_message.setImmediate(false);
		label_message.setWidth("-1px");
		label_message.setHeight("-1px");
		label_message.setValue("提示信息");
		mainLayout.addComponent(label_message);
		
		// optionGroup_1
		optionGroup_1 = new OptionGroup();
		optionGroup_1.setCaption("请选择处理方式");
		optionGroup_1.setImmediate(false);
		optionGroup_1.setWidth("-1px");
		optionGroup_1.setHeight("-1px");
		mainLayout.addComponent(optionGroup_1);
		
		// textField_price_diff
		textField_price_diff = new TextField();
		textField_price_diff.setCaption("输入差价");
		textField_price_diff.setEnabled(true);
		textField_price_diff.setImmediate(false);
		textField_price_diff.setWidth("-1px");
		textField_price_diff.setHeight("-1px");
		textField_price_diff.setSecret(false);
		mainLayout.addComponent(textField_price_diff);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		return mainLayout;
	}



	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// button_ok
		button_ok = new Button();
		button_ok.setCaption("确定");
		button_ok.setImmediate(true);
		button_ok.setWidth("-1px");
		button_ok.setHeight("-1px");
		horizontalLayout_1.addComponent(button_ok);
		
		// button_cancel
		button_cancel = new Button();
		button_cancel.setCaption("取消");
		button_cancel.setImmediate(true);
		button_cancel.setWidth("-1px");
		button_cancel.setHeight("-1px");
		horizontalLayout_1.addComponent(button_cancel);
		
		return horizontalLayout_1;
	}

}
