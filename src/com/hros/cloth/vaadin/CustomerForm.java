package com.hros.cloth.vaadin;

import java.util.Arrays;
import java.util.List;

import com.hros.cloth.dao.ClothDao;
import com.hros.cloth.dao.Customer2Dao;
import com.hros.cloth.dao.OrderHistoryDao;
import com.hros.cloth.domain.Customer2;
import com.hros.cloth.domain.OrderHistory;
import com.hros.cloth.service.ClothService;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.Form;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;

public class CustomerForm extends CustomComponent implements Button.ClickListener{

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_form;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_form_buttons;
	@AutoGenerated
	private Button button_save_customer;
	@AutoGenerated
	private Form customerBeanForm;
	@AutoGenerated
	private VerticalLayout verticalLayout_table;
	@AutoGenerated
	private Table table_customer;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_button;
	@AutoGenerated
	private Button button_del_customer;
	@AutoGenerated
	private Button button_add_customer;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private ClothDao clothDao;
	private Customer2Dao customerDao;
	private OrderHistoryDao orderHistoryDao;
	private ClothService clothService;
	
	private static final String COMMON_FIELD_WIDTH = "12em";
	
	private Customer2 selectedCustomer;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CustomerForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		table_customer.addListener(new Table.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                // in multiselect mode, a Set of itemIds is returned,
                // in singleselect mode the itemId is returned directly
            	selectedCustomer = (Customer2)event.getProperty().getValue();
            	
            	if(selectedCustomer != null){
            		BeanItem<Customer2> customerBeanItem = new BeanItem<Customer2>(selectedCustomer);
            		customerBeanForm.setItemDataSource(customerBeanItem);
            		customerBeanForm.setWriteThrough(true);
            		formatCustomerBeanForm();
    			}
            }
        });
		table_customer.setSelectable(true);
		table_customer.setMultiSelect(false);
		table_customer.setImmediate(true); 
		
		button_add_customer.addListener(this);
		button_del_customer.addListener(this);
		button_save_customer.addListener(this);
		
	}

	@Override
	public void attach(){
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		clothService = (ClothService) help.getBean("clothServiceImpl");
		clothDao = (ClothDao)help.getBean("clothDao");
		customerDao = (Customer2Dao)help.getBean("customer2Dao");
		orderHistoryDao = (OrderHistoryDao)help.getBean("orderHistoryDao");
		populateCustomers();
		//populateUsers();
	}
	
	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		//添加按钮
		if(event.getSource().equals(button_add_customer)){
			Customer2 customer = new Customer2();
			customer.setName("新建客户");
			customer.setCustomerNumber(String.valueOf(System.currentTimeMillis()));
			customer.setPhone("1111");
			customerDao.insertCustomer(customer);
			
			Item item = table_customer.getContainerDataSource().addItem(customer);
			Property property = item.getItemProperty("name");
			property.setValue(customer.getName());
			table_customer.setValue(customer);
			
			
			BeanItem<Customer2> customerBeanItem = new BeanItem<Customer2>(customer);
			customerBeanForm.setItemDataSource(customerBeanItem);
			formatCustomerBeanForm();
		}
		//删除按钮
		if(event.getSource().equals(button_del_customer)){
			// 如果未选中任何数据,提示用户
			if(selectedCustomer == null ){
				getWindow().showNotification("请选择一个客户来删除" ,"未选择数据");
				return;
			}
			// 如果已购商品,则不能删除该客户
			List<OrderHistory> boughtHistory = orderHistoryDao.findOrderHistoryByCustomerID(selectedCustomer.getCustomer2ID());
			if(boughtHistory != null && boughtHistory.size() > 0){
				getWindow().showNotification("该客户已购买过衣服,为便于系统维护,不能删除该客户" ,"提示",Notification.TYPE_ERROR_MESSAGE);
				return;
			}
			
			customerDao.deleteCustomer(selectedCustomer.getCustomer2ID());
			table_customer.getContainerDataSource().removeItem(selectedCustomer);
			table_customer.requestRepaint();
			
			selectedCustomer = null;
		}
		
		//保存按钮
		if(event.getSource().equals(button_save_customer)){
			try{
				customerBeanForm.commit();
			}catch(Exception e){
				e.printStackTrace();
				return;
			}
			customerDao.updateCustomer(selectedCustomer);
			//table_cloth.setEditable(false);
			table_customer.requestRepaint();
			table_customer.getContainerDataSource().getItem(selectedCustomer).getItemProperty("name").setValue(selectedCustomer.getName());
			getWindow().showNotification("成功保存 "+selectedCustomer.getName(), "提示");
		}
		
	}	
	private void populateCustomers(){
		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("name", String.class,null);
		List<Customer2> customers = customerDao.getAllCustomers();
		for(Customer2 customer:customers){
			 Item item = container.addItem(customer);
			 item.getItemProperty("name").setValue(customer.getName());
		}
		
		table_customer.setContainerDataSource(container);
		table_customer.setColumnHeaders(new String[] { "名称"});
		table_customer.setVisibleColumns(new String[] { "name"});
		table_customer.setWidth("300px");
	}
	
	
	/**
	 * 设置user form显示格式
	 */
	private void formatCustomerBeanForm(){
		customerBeanForm.setFormFieldFactory(new CustomerFieldFactory());
		customerBeanForm.setVisibleItemProperties(Arrays.asList(new String[] {
                "name", "number", "phone", }));
	}
	
	private class CustomerFieldFactory extends DefaultFieldFactory {

		public CustomerFieldFactory() {
			
		}

		@Override
		public Field createField(Item item, Object propertyId,
				Component uiContext) {
			Field f = null;
			if ("countryCode".equals(propertyId)) {
				// filtering ComboBox w/ country names
				//return countries;
			} else if ("password".equals(propertyId)) {
				// Create a password field so the password is not shown
				f = createPasswordField(propertyId);
			} else {
				// Use the super class to create a suitable field base on the
				// property type.
				f = super.createField(item, propertyId, uiContext);
			}
			//clothID,name,size,color,barCode,count,salesOffType,salesOff,originalPrice,price,stockDate
			if ("name".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("名称");
				tf.setRequired(true);
				tf.setRequiredError("请输入名称");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"名称需为1-25个字符", 1, 25, false));
			} else if ("number".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("客户编号");
				tf.setRequired(false);
				tf.setRequiredError("请输入客户编号");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"客户编号需为3-50个字符", 3, 50, false));
			} else if ("phone".equals(propertyId)) {
				TextField tf = (TextField) f;
				tf.setCaption("电话号码");
				tf.setRequired(false);
				tf.setRequiredError("请输入电话号码");
				tf.setWidth(COMMON_FIELD_WIDTH);
				tf.addValidator(new StringLengthValidator(
						"电话号码需为 3-50 字符", 3, 50, false));
			}

			return f;
		}

		private PasswordField createPasswordField(Object propertyId) {
			PasswordField pf = new PasswordField();
			pf.setCaption(DefaultFieldFactory
					.createCaptionByPropertyId(propertyId));
			return pf;
		}
	}

	
		
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_table
		verticalLayout_table = buildVerticalLayout_table();
		mainLayout.addComponent(verticalLayout_table);
		
		// verticalLayout_form
		verticalLayout_form = buildVerticalLayout_form();
		mainLayout.addComponent(verticalLayout_form);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_table() {
		// common part: create layout
		verticalLayout_table = new VerticalLayout();
		verticalLayout_table.setImmediate(false);
		verticalLayout_table.setWidth("-1px");
		verticalLayout_table.setHeight("-1px");
		verticalLayout_table.setMargin(false);
		
		// horizontalLayout_button
		horizontalLayout_button = buildHorizontalLayout_button();
		verticalLayout_table.addComponent(horizontalLayout_button);
		
		// table_customer
		table_customer = new Table();
		table_customer.setImmediate(false);
		table_customer.setWidth("-1px");
		table_customer.setHeight("-1px");
		verticalLayout_table.addComponent(table_customer);
		
		return verticalLayout_table;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_button() {
		// common part: create layout
		horizontalLayout_button = new HorizontalLayout();
		horizontalLayout_button.setImmediate(false);
		horizontalLayout_button.setWidth("-1px");
		horizontalLayout_button.setHeight("-1px");
		horizontalLayout_button.setMargin(false);
		
		// button_add_customer
		button_add_customer = new Button();
		button_add_customer.setCaption("增加");
		button_add_customer.setImmediate(true);
		button_add_customer.setWidth("-1px");
		button_add_customer.setHeight("-1px");
		horizontalLayout_button.addComponent(button_add_customer);
		
		// button_del_customer
		button_del_customer = new Button();
		button_del_customer.setCaption("删除");
		button_del_customer.setImmediate(true);
		button_del_customer.setWidth("-1px");
		button_del_customer.setHeight("-1px");
		horizontalLayout_button.addComponent(button_del_customer);
		
		return horizontalLayout_button;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_form() {
		// common part: create layout
		verticalLayout_form = new VerticalLayout();
		verticalLayout_form.setImmediate(false);
		verticalLayout_form.setWidth("-1px");
		verticalLayout_form.setHeight("-1px");
		verticalLayout_form.setMargin(false);
		
		// customerBeanForm
		customerBeanForm = new Form();
		customerBeanForm.setImmediate(false);
		customerBeanForm.setWidth("400px");
		customerBeanForm.setHeight("-1px");
		verticalLayout_form.addComponent(customerBeanForm);
		
		// horizontalLayout_form_buttons
		horizontalLayout_form_buttons = buildHorizontalLayout_form_buttons();
		verticalLayout_form.addComponent(horizontalLayout_form_buttons);
		
		return verticalLayout_form;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_form_buttons() {
		// common part: create layout
		horizontalLayout_form_buttons = new HorizontalLayout();
		horizontalLayout_form_buttons.setImmediate(false);
		horizontalLayout_form_buttons.setWidth("-1px");
		horizontalLayout_form_buttons.setHeight("-1px");
		horizontalLayout_form_buttons.setMargin(false);
		
		// button_save_customer
		button_save_customer = new Button();
		button_save_customer.setCaption("保存");
		button_save_customer.setImmediate(true);
		button_save_customer.setWidth("-1px");
		button_save_customer.setHeight("-1px");
		horizontalLayout_form_buttons.addComponent(button_save_customer);
		
		return horizontalLayout_form_buttons;
	}

}
