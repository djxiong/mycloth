package com.hros.cloth.vaadin;

import java.text.DateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.bibounde.vprotovis.BarChartComponent;
import com.hros.cloth.dao.ClothDao;
import com.hros.cloth.dao.Customer2Dao;
import com.hros.cloth.dao.OrderHistoryDao;
import com.hros.cloth.dao.ReturnRecordDao;
import com.hros.cloth.domain.Cloth;
import com.hros.cloth.domain.OrderHistory;
import com.hros.cloth.domain.ReturnRecord;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;

public class StaticsForm extends CustomComponent implements Button.ClickListener{

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet barChartComponent_tab;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Label label_total_profit;
	@AutoGenerated
	private Label label_total_sale_amount;
	@AutoGenerated
	private Label label_total_sale_cash;
	@AutoGenerated
	private BarChartComponent barChartComponent_total_sale_amount;
	@AutoGenerated
	private BarChartComponent barChartComponent_total_sale_cash;
	@AutoGenerated
	private BarChartComponent barChartComponent_profit;
	@AutoGenerated
	private BarChartComponent barChartComponent_cloth_repos;
	@AutoGenerated
	private BarChartComponent barChartComponent_return_amount;
	@AutoGenerated
	private BarChartComponent barChartComponent_exchange_amount;
	@AutoGenerated
	private BarChartComponent barChartComponent_sale_amount;
	@AutoGenerated
	private BarChartComponent barChartComponent_total_cash;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_search;
	@AutoGenerated
	private Button button_search;
	@AutoGenerated
	private PopupDateField popupDateField_end;
	@AutoGenerated
	private PopupDateField popupDateField_start;
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	private ClothDao clothDao;
	private Customer2Dao customerDao;
	private OrderHistoryDao orderHistoryDao; 
	private ReturnRecordDao returnRecordDao;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public StaticsForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		button_search.addListener(this);
		
		popupDateField_start.setDateFormat("yyyy-MM-dd");
		popupDateField_end.setDateFormat("yyyy-MM-dd");
		
		popupDateField_start.setResolution(PopupDateField.RESOLUTION_DAY);
		popupDateField_end.setResolution(PopupDateField.RESOLUTION_DAY);
	}
	@Override
	public void attach(){
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		//clothService = (ClothService) help.getBean("clothServiceImpl");
		clothDao = (ClothDao)help.getBean("clothDao");
		customerDao = (Customer2Dao)help.getBean("customer2Dao");
		orderHistoryDao = (OrderHistoryDao)help.getBean("orderHistoryDao");
		returnRecordDao = (ReturnRecordDao)help.getBean("returnRecordDao");
		
		//默认显示最近一周的订单

		popupDateField_start.setValue(new Date(System.currentTimeMillis() - 24*7*3600*1000));
		popupDateField_end.setValue(new Date());
		
		
		populateStatics();
		//populateCloths();
		//populateUsers();
	}	
	
	private void populateStatics(){
		DateFormat dateFormatter = DateFormat.getDateInstance(DateFormat.SHORT);
		Map<String,String> map = new HashMap<String,String>();
		String startDate = dateFormatter.format(popupDateField_start.getValue());
		map.put("startDate", startDate);
		String endDate = dateFormatter.format(popupDateField_end.getValue());
		map.put("endDate", endDate);

		List<OrderHistory> orderHistories = orderHistoryDao.findOrderHistoryBetweenDate(map);
		//销售金额
		Map<String,Float> daySalesCash = new HashMap<String,Float>();
		//销售数量
		Map<String,Integer> daySalesAmount = new HashMap<String,Integer>();
		//利润
		Map<String,Float> dayProfitCash = new HashMap<String,Float>();
		//换货数
		Map<String,Integer> exchangeAmount = new HashMap<String,Integer>();
		
		//销售金额(按衣服名称统计)
		Map<String,Float> totalSalesCash = new HashMap<String,Float>();
		
		//销售数量(按衣服名称统计)
		Map<String,Integer> totalSalesAmount = new HashMap<String,Integer>();
		//总销售金额
		Float totalSalesCashFloat = 0F;
		//总销售数量
		Integer totalSalesAmountInt = 0;
		//总利润
		Float totalProfitCashFloat = 0F;
		for(OrderHistory orderHistory:orderHistories){
			Cloth cloth  = clothDao.getClothByID(orderHistory.getClothID());
			String clothName = cloth.getName();
			//总销售金额
			totalSalesCashFloat += orderHistory.getConsumption();
			//总销售量
			totalSalesAmountInt++;
			//总利润
			totalProfitCashFloat += orderHistory.getProfit();
			//销售金额(按衣服名称统计)
			Float everyClothCash = totalSalesCash.get(clothName);
			if(everyClothCash == null){
				totalSalesCash.put(clothName, orderHistory.getConsumption());
			}
			else{
				totalSalesCash.put(clothName, everyClothCash + orderHistory.getConsumption());
			}
			//被换过货的订单不计算在内
			if (orderHistory.getState().equals(OrderHistory.STATE_SUCCESS)) {
				// 销售数量(按衣服名称统计)
				Integer everyClothAmount = totalSalesAmount.get(clothName);
				if (everyClothAmount == null) {
					totalSalesAmount.put(clothName, 1);
				} else {
					totalSalesAmount.put(clothName, everyClothAmount + 1);
				}
			}
			String currentDay = dateFormatter.format(orderHistory.getConsumeDate());
			 ////销售金额
			 Float todaySalesCach = daySalesCash.get(currentDay);
			 if(todaySalesCach == null ){
				 daySalesCash.put(currentDay, orderHistory.getConsumption());
			 }
			 else{
				 daySalesCash.put(currentDay, todaySalesCach+orderHistory.getConsumption());
			 }
			//被换过货的订单不计算在内
			if (orderHistory.getState().equals(OrderHistory.STATE_SUCCESS)) {
				// 销售数量
				Integer todaySalesAmount = daySalesAmount.get(currentDay);
				if (todaySalesAmount == null) {
					daySalesAmount.put(currentDay, 1);
				} else {
					daySalesAmount.put(currentDay, todaySalesAmount + 1);
				}
			}
			 //利润
			 Float todayProfitCash = dayProfitCash.get(currentDay);
			 if(todayProfitCash == null ){
				 dayProfitCash.put(currentDay, orderHistory.getProfit());
			 }
			 else{
				 dayProfitCash.put(currentDay, todayProfitCash+orderHistory.getProfit());
			 }
			 //计算换货数,如果orderHistory.getExchangedOrderID() 不为null,则这个是换货单
			if (orderHistory.getExchangedOrderID() != null) {
				Integer todayExchangeAmount = exchangeAmount.get(currentDay);
				if (todayExchangeAmount == null) {
					exchangeAmount.put(currentDay, 1);
				} else {
					exchangeAmount.put(currentDay, todayExchangeAmount + 1);
				}
			}
		}
		drawBarFloat(daySalesCash,barChartComponent_total_cash,"销售额");
		drawBarInteger(daySalesAmount,barChartComponent_sale_amount,"销售量");
		drawBarInteger(exchangeAmount,barChartComponent_exchange_amount,"换货量");
		drawBarFloat(dayProfitCash,barChartComponent_profit,"利润");
		
		
		//按衣服名称统计的销售金额
		drawBarFloat(totalSalesCash,barChartComponent_total_sale_cash,"销售金额");
		//按衣服名称统计的销售数量
		drawBarInteger(totalSalesAmount,barChartComponent_total_sale_amount,"销售数量");
		
		label_total_sale_cash.setValue("总销售金额:"+totalSalesCashFloat);
		label_total_sale_amount.setValue("总销售数量:"+totalSalesAmountInt);
		label_total_profit.setValue("总利润:"+totalProfitCashFloat);
		//退货记录
		List<ReturnRecord> returnRecords = returnRecordDao.findReturnRecordBetweenDate(map);
		Map<String,Integer> returnAmounts =  new HashMap<String,Integer>();
		for(ReturnRecord record:returnRecords){
			String currentDay = dateFormatter.format(record.getReturnDate());
			Integer todayReturnAmount = returnAmounts.get(currentDay);
			 if(todayReturnAmount == null){
				 returnAmounts.put(currentDay, record.getCount());
			 }
			 else{
				 returnAmounts.put(currentDay, todayReturnAmount+record.getCount());
				 
			 }
		}
		drawBarInteger(returnAmounts,barChartComponent_return_amount,"退货量");
		//当前库存
		List<Cloth> remainCloth = clothDao.getRemainCloths();
		Map<String,Integer> remainClothAmounts =  new HashMap<String,Integer>();
		for(Cloth cloth:remainCloth){
			String clothName = cloth.getName();
			Integer thisClothRemainAmount = remainClothAmounts.get(clothName);
			 if(thisClothRemainAmount == null){
				 remainClothAmounts.put(clothName, cloth.getCount());
			 }
			 else{
				 //thisClothRemainAmount += cloth.getCount();
				 remainClothAmounts.put(clothName, thisClothRemainAmount+cloth.getCount());
			 }
		}
		drawBarInteger(remainClothAmounts,barChartComponent_cloth_repos,"库存量");
	}
	
	private void drawBarFloat(Map<String,Float> daySalesCash,BarChartComponent bar,String title){
		bar.setCaption(title);
		String[] keys = new String[(daySalesCash.keySet().size())];
		daySalesCash.keySet().toArray(keys);
		Arrays.sort(keys);
		bar.clearSeries();	
		for(String date:keys){
			bar.addSerie(date, new double[]{daySalesCash.get(date)});
		}
		formatBar(bar);
	}
	
	private void drawBarInteger(Map<String,Integer> daySalesAmount,BarChartComponent bar,String title){
		bar.clearSeries();
		bar.setCaption(title);
		String[] keys = new String[(daySalesAmount.keySet().size())];
		daySalesAmount.keySet().toArray(keys);
		Arrays.sort(keys);
		for(String date:keys){
			double value = daySalesAmount.get(date);
			bar.addSerie(date, new double[]{value});
		}
		formatBar(bar);
	}
	
	private void formatBar(BarChartComponent bar){
		bar.setChartWidth(800d);
		bar.setChartHeight(500d);
		
		bar.setMarginLeft(50d);

		bar.setMarginBottom(100d);

		bar.setXAxisVisible(true);
		bar.setXAxisLabelVisible(true);

		bar.setYAxisVisible(true);
		bar.setYAxisLabelVisible(true);
		bar.setYAxisLabelStep(300d);
		bar.setYAxisGridVisible(true);
		
		bar.setLegendVisible(true);
		bar.setLegendAreaWidth(100d);
		bar.setSizeFull();
	}
	
	
	@Override
	public void buttonClick(ClickEvent event) {
		if(event.getSource().equals(button_search)){
			populateStatics();
		}
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalLayout_search
		horizontalLayout_search = buildHorizontalLayout_search();
		mainLayout.addComponent(horizontalLayout_search);
		
		// barChartComponent_tab
		barChartComponent_tab = buildBarChartComponent_tab();
		mainLayout.addComponent(barChartComponent_tab);
		mainLayout.setExpandRatio(barChartComponent_tab, 1.0f);
		
		return mainLayout;
	}
	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_search() {
		// common part: create layout
		horizontalLayout_search = new HorizontalLayout();
		horizontalLayout_search.setImmediate(false);
		horizontalLayout_search.setWidth("-1px");
		horizontalLayout_search.setHeight("-1px");
		horizontalLayout_search.setMargin(false);
		
		// popupDateField_start
		popupDateField_start = new PopupDateField();
		popupDateField_start.setCaption("开始日期");
		popupDateField_start.setImmediate(false);
		popupDateField_start.setWidth("-1px");
		popupDateField_start.setHeight("-1px");
		popupDateField_start.setInvalidAllowed(false);
		horizontalLayout_search.addComponent(popupDateField_start);
		
		// popupDateField_end
		popupDateField_end = new PopupDateField();
		popupDateField_end.setCaption("截止日期");
		popupDateField_end.setImmediate(false);
		popupDateField_end.setWidth("-1px");
		popupDateField_end.setHeight("-1px");
		popupDateField_end.setInvalidAllowed(false);
		horizontalLayout_search.addComponent(popupDateField_end);
		
		// button_search
		button_search = new Button();
		button_search.setCaption("搜索");
		button_search.setImmediate(true);
		button_search.setWidth("-1px");
		button_search.setHeight("-1px");
		horizontalLayout_search.addComponent(button_search);
		horizontalLayout_search.setComponentAlignment(button_search,
				new Alignment(24));
		
		return horizontalLayout_search;
	}
	@AutoGenerated
	private TabSheet buildBarChartComponent_tab() {
		// common part: create layout
		barChartComponent_tab = new TabSheet();
		barChartComponent_tab.setImmediate(true);
		barChartComponent_tab.setWidth("-1px");
		barChartComponent_tab.setHeight("-1px");
		
		// barChartComponent_total_cash
		barChartComponent_total_cash = new BarChartComponent();
		barChartComponent_total_cash.setImmediate(false);
		barChartComponent_total_cash.setWidth("-1px");
		barChartComponent_total_cash.setHeight("-1px");
		barChartComponent_tab.addTab(barChartComponent_total_cash, "销售额(日期)",
				null);
		
		// barChartComponent_sale_amount
		barChartComponent_sale_amount = new BarChartComponent();
		barChartComponent_sale_amount.setImmediate(false);
		barChartComponent_sale_amount.setWidth("-1px");
		barChartComponent_sale_amount.setHeight("-1px");
		barChartComponent_tab.addTab(barChartComponent_sale_amount, "销售量(日期)",
				null);
		
		// barChartComponent_exchange_amount
		barChartComponent_exchange_amount = new BarChartComponent();
		barChartComponent_exchange_amount.setImmediate(false);
		barChartComponent_exchange_amount.setWidth("-1px");
		barChartComponent_exchange_amount.setHeight("-1px");
		barChartComponent_tab.addTab(barChartComponent_exchange_amount, "换货量",
				null);
		
		// barChartComponent_return_amount
		barChartComponent_return_amount = new BarChartComponent();
		barChartComponent_return_amount.setImmediate(false);
		barChartComponent_return_amount.setWidth("-1px");
		barChartComponent_return_amount.setHeight("-1px");
		barChartComponent_tab.addTab(barChartComponent_return_amount, "退货量",
				null);
		
		// barChartComponent_cloth_repos
		barChartComponent_cloth_repos = new BarChartComponent();
		barChartComponent_cloth_repos.setImmediate(false);
		barChartComponent_cloth_repos.setWidth("-1px");
		barChartComponent_cloth_repos.setHeight("-1px");
		barChartComponent_tab
				.addTab(barChartComponent_cloth_repos, "库存量", null);
		
		// barChartComponent_profit
		barChartComponent_profit = new BarChartComponent();
		barChartComponent_profit.setImmediate(false);
		barChartComponent_profit.setWidth("-1px");
		barChartComponent_profit.setHeight("-1px");
		barChartComponent_tab.addTab(barChartComponent_profit, "利润", null);
		
		// barChartComponent_total_sale_cash
		barChartComponent_total_sale_cash = new BarChartComponent();
		barChartComponent_total_sale_cash.setImmediate(false);
		barChartComponent_total_sale_cash.setWidth("-1px");
		barChartComponent_total_sale_cash.setHeight("-1px");
		barChartComponent_tab.addTab(barChartComponent_total_sale_cash,
				"销售额(服装)", null);
		
		// barChartComponent_total_sale_amount
		barChartComponent_total_sale_amount = new BarChartComponent();
		barChartComponent_total_sale_amount.setImmediate(false);
		barChartComponent_total_sale_amount.setWidth("-1px");
		barChartComponent_total_sale_amount.setHeight("-1px");
		barChartComponent_tab.addTab(barChartComponent_total_sale_amount,
				"销售量(服装)", null);
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		barChartComponent_tab.addTab(verticalLayout_2, "总计", null);
		
		return barChartComponent_tab;
	}
	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("-1px");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(false);
		
		// label_total_sale_cash
		label_total_sale_cash = new Label();
		label_total_sale_cash.setImmediate(false);
		label_total_sale_cash.setWidth("-1px");
		label_total_sale_cash.setHeight("-1px");
		label_total_sale_cash.setValue("Label");
		verticalLayout_2.addComponent(label_total_sale_cash);
		
		// label_total_sale_amount
		label_total_sale_amount = new Label();
		label_total_sale_amount.setImmediate(false);
		label_total_sale_amount.setWidth("-1px");
		label_total_sale_amount.setHeight("-1px");
		label_total_sale_amount.setValue("Label");
		verticalLayout_2.addComponent(label_total_sale_amount);
		
		// label_total_profit
		label_total_profit = new Label();
		label_total_profit.setImmediate(false);
		label_total_profit.setWidth("-1px");
		label_total_profit.setHeight("-1px");
		label_total_profit.setValue("Label");
		verticalLayout_2.addComponent(label_total_profit);
		
		return verticalLayout_2;
	}

}
