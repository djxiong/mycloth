package com.hros.insurance.vaadin;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hros.insurance.dao.TreeNodeDao;
import com.hros.insurance.domain.InsuranceDetailInfo;
import com.hros.insurance.domain.InsuranceInfo;
import com.hros.insurance.domain.TreeNodeInfo;
import com.hros.insurance.service.InsuranceService;
import com.hros.insurance.service.TreeNodeService;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.Action;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;

public class InsuranceForm extends CustomComponent implements ItemClickListener,Button.ClickListener,Action.Handler{

	@AutoGenerated
	private HorizontalLayout mainLayout;

	@AutoGenerated
	private VerticalLayout verticalLayout_3;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_3;

	@AutoGenerated
	private Button button_save;

	@AutoGenerated
	private Button button_edit;

	@AutoGenerated
	private Button button_delete;

	@AutoGenerated
	private Button button_add;

	@AutoGenerated
	private Table table;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;

	@AutoGenerated
	private Button button_update_name;

	@AutoGenerated
	private TextField textField_name;

	@AutoGenerated
	private Tree tree;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	private static final Action ACTION_ADD_TREENODE = new Action("添加新节点");   
	private static final Action ACTION_DELETE_TREENODE = new Action("删除此节点");  
	private static final Action ACTION_ADD_INSURANCE = new Action("添加新保险");   
	private static final Action ACTION_DELETE_INSURANCE = new Action("删除此保险"); 
	private static final Action ACTION_ADD_INSURANCE_DETAIL = new Action("添加保险明细"); 
	private static final Action[] ACTIONS = new Action[] { ACTION_ADD_TREENODE,ACTION_DELETE_TREENODE };
	
	private List<TreeNodeInfo> dataSetList;
	

	private InsuranceService insuranceService;
	
	private TreeNodeService treeNodeService;
	
	private TreeNodeDao treeNodeDao;
	/**
	 * 
	 */
	private static final long serialVersionUID = 2395141010055880056L;
	private InsuranceInfo insurance;
	
	private Set<?> selectedTableItems;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public InsuranceForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		tree.addListener(this);
		tree.addActionHandler(this);
		table.addListener(new Table.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                // in multiselect mode, a Set of itemIds is returned,
                // in singleselect mode the itemId is returned directly
            	selectedTableItems = (Set<?>) event.getProperty().getValue();
                
            }
        });
		
		button_update_name.addListener(this);
		button_add.addListener(this);
		button_edit.addListener(this);
		button_save.addListener(this);
		button_delete.addListener(this);
	    table.setSelectable(true);
	    table.setMultiSelect(true);
	    table.setImmediate(true); // react at once when something is selected

	}
	
	
	@Override
	public void attach(){
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		insuranceService = (InsuranceService) help.getBean("insuranceServiceImpl");
		treeNodeService = (TreeNodeService)help.getBean("treeNodeServiceImpl");
		treeNodeDao = (TreeNodeDao)help.getBean("treeNodeDao");
		populateTreeNodeInfo();
	}
	
	//生成tree数据源
	private void populateTreeNodeInfo() {
		dataSetList = treeNodeService.selectTreeNodeList(TreeNodeInfo.TABLE_NAME_INSURANCE);
		
		int fItemId = 0;
		// Create new container
		HierarchicalContainer treeNodeContainer = new HierarchicalContainer();
		treeNodeContainer.addContainerProperty("name", String.class, null);
		treeNodeContainer.addContainerProperty("type", String.class, null);
		Map<Integer, TreeNodeInfo> itemMap = new HashMap<Integer, TreeNodeInfo>();

		for (int i = 0; i < dataSetList.size(); i++) {
			TreeNodeInfo treeNode = dataSetList.get(i);
			itemMap.put(treeNode.getTreeNodeID(), treeNode);
			Item item = treeNodeContainer.addItem(treeNode);
			item.getItemProperty("name").setValue(treeNode.getTreeNodeName());
			item.getItemProperty("type").setValue("TreeNodeInfo");
			fItemId = treeNode.getParentID();
			treeNodeContainer.setChildrenAllowed(treeNode, true);
			if (fItemId != 0) {
				TreeNodeInfo parentTreeNode = itemMap.get(fItemId);
				treeNodeContainer.setChildrenAllowed(parentTreeNode, true);
				treeNodeContainer.setParent(treeNode, parentTreeNode);
			}
			//add insurance node
			List<InsuranceInfo> insuranceInfos = insuranceService.findInsuranceByTreeNodeID(treeNode.getTreeNodeID());
			for(InsuranceInfo insuranceInfo : insuranceInfos){
				item = treeNodeContainer.addItem(insuranceInfo);
				item.getItemProperty("name").setValue(insuranceInfo.getInsuranceName());
				item.getItemProperty("type").setValue("InsuranceInfo");
				treeNodeContainer.setParent(insuranceInfo,treeNode);
				treeNodeContainer.setChildrenAllowed(insuranceInfo, false);
			}
		}
		tree.setContainerDataSource(treeNodeContainer);
		tree.requestRepaint();
	}
	
	@Override
	public void itemClick(ItemClickEvent event) {
		// TODO Auto-generated method stub
		getWindow().showNotification("Selected item: " + event.getItem(),"modifiers");
		Object itemID =  event.getItemId();
		if(itemID instanceof TreeNodeInfo){
			TreeNodeInfo treeNode = (TreeNodeInfo)itemID;
			textField_name.setValue(treeNode.getTreeNodeName());
			textField_name.setData(treeNode);
			//在table里显示保险
			populateInsuranceInfos(treeNode);
			table.setData(treeNode);
		}
		else if(itemID instanceof InsuranceInfo){
			InsuranceInfo insurance = (InsuranceInfo) itemID;
			textField_name.setValue(insurance.getInsuranceName());
			textField_name.setData(insurance);
			//在table里显示保险明细
			populateInsuranceDetailInfos(insurance);
			table.requestRepaint();
			table.setData(insurance);
		}
	}
	
	
	private void populateInsuranceInfos(TreeNodeInfo treeNode){
		IndexedContainer container = new IndexedContainer();
		
		container.addContainerProperty("insuranceName", String.class,null);
        List<InsuranceInfo> insuranceInfos = insuranceService.findInsuranceByTreeNodeID(treeNode.getTreeNodeID());
        for (InsuranceInfo insuranceInfo :  insuranceInfos ) {
            Item item = container.addItem(insuranceInfo);
            setInsuranceItemValue(item,insuranceInfo);
        }
        table.setContainerDataSource(container);
        table.setColumnHeaders(new String[] { "社保名称" });
        table.setVisibleColumns(new String[] { "insuranceName" });
        table.setWidth("600px");
        
	}
	
	private void setInsuranceItemValue(Item item,InsuranceInfo insuranceInfo){
		item.getItemProperty("insuranceName").setValue(insuranceInfo.getInsuranceName());
	}
	
	private void populateInsuranceDetailInfos(InsuranceInfo insuranceInfo){
		IndexedContainer container = new IndexedContainer();
		
		container.addContainerProperty("insuranceDetailName", String.class,null);
        container.addContainerProperty("base", Float.class, null);
        container.addContainerProperty("companyRate", Float.class,null);
        container.addContainerProperty("personalRate", Float.class,null);
        container.addContainerProperty("companyAmount", Float.class,null);
        container.addContainerProperty("personalAmount", Float.class,null);
        
        List<InsuranceDetailInfo> insuranceDetailInfos = insuranceService.selectDetailsForInsurance(insuranceInfo.getInsuranceID());
        for (InsuranceDetailInfo insuranceDetailInfo :  insuranceDetailInfos ) {
            Item item = container.addItem(insuranceDetailInfo);
            setInsuranceDetailItemValue(item,insuranceDetailInfo);
        }
        table.setContainerDataSource(container);
        table.setColumnHeaders(new String[] { "保险名称", "缴费基数", "单位比例","个人比例","单位金额","个人金额" });
        table.setVisibleColumns(new String[] { "insuranceDetailName", "base", "companyRate","personalRate","companyAmount","personalAmount" });
		table.setWidth("800px");
		
	}
	
	private void setInsuranceDetailItemValue(Item item,InsuranceDetailInfo insuranceDetailInfo){
		item.getItemProperty("insuranceDetailName").setValue(insuranceDetailInfo.getInsuranceDetailName());
        item.getItemProperty("base").setValue(insuranceDetailInfo.getBase());
        item.getItemProperty("companyRate").setValue(insuranceDetailInfo.getCompanyRate());
        item.getItemProperty("personalRate").setValue(insuranceDetailInfo.getPersonalRate());
        item.getItemProperty("companyAmount").setValue(insuranceDetailInfo.getCompanyAmount());
        item.getItemProperty("personalAmount").setValue(insuranceDetailInfo.getPersonalAmount());
	}
	
	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		//更新名称按钮的点击事件
		if(event.getSource().equals(button_update_name)){
			Object data = textField_name.getData();
			if(data instanceof InsuranceInfo){
				InsuranceInfo insuranceInfo = (InsuranceInfo)data;
				insuranceInfo.setInsuranceName(textField_name.getValue().toString());
				insuranceService.updateInsurance(insuranceInfo);
			}
			if(data instanceof TreeNodeInfo){
				TreeNodeInfo treeNodeInfo = (TreeNodeInfo)data;
				treeNodeInfo.setTreeNodeName(textField_name.getValue().toString());
				treeNodeService.updateTreeNode(treeNodeInfo);
				//tree.set
			}
			tree.requestRepaint();
		}
		
		//添加按钮的点击事件
		if(event.getSource().equals(button_add)){
			Object data = table.getData();
			//如果选中的是树节点,则在table里添加一条保险
			if(data instanceof TreeNodeInfo){
				InsuranceInfo insuranceInfo = new InsuranceInfo();
				insuranceInfo.setInsuranceName("新保险");
				insuranceInfo.setTreeNodeID(((TreeNodeInfo)data).getTreeNodeID());
				insuranceService.addInsurance(insuranceInfo);
				Item item = table.getContainerDataSource().addItem(insuranceInfo);
				setInsuranceItemValue(item,insuranceInfo);
				table.requestRepaint();
				//更新树
				//populateTreeNodeInfo();
				tree.getContainerDataSource().addItem(insuranceInfo);
				((HierarchicalContainer)tree.getContainerDataSource()).setParent(insuranceInfo, data);
				((HierarchicalContainer)tree.getContainerDataSource()).setChildrenAllowed(insuranceInfo, false);
				tree.requestRepaint();
			}
			if(data instanceof InsuranceInfo){
				InsuranceInfo insuranceInfo = (InsuranceInfo)data;
				InsuranceDetailInfo insuranceDetailInfo = new InsuranceDetailInfo();
				insuranceDetailInfo.setInsuranceID(insuranceInfo.getInsuranceID());
				insuranceService.addInsuranceDetail(insuranceDetailInfo);
				Item item = table.getContainerDataSource().addItem(insuranceDetailInfo);
				table.setEditable(true);
				setInsuranceDetailItemValue(item,insuranceDetailInfo);
				table.requestRepaint();
			}
		}
		
		//保存事件
		if(event.getSource().equals(button_save)){
			table.setWriteThrough(true);
			table.commit();
			Collection<?> itemIds = table.getContainerDataSource().getItemIds();
			for(Object itemId:itemIds){
				if(itemId instanceof InsuranceDetailInfo){
					//table.refreshRowCache();
					InsuranceDetailInfo insuranceDetailInfo = (InsuranceDetailInfo)itemId;
					fillInsuranceDetail(insuranceDetailInfo);
					insuranceService.updateInsuranceDetail((InsuranceDetailInfo)itemId);
				}
				else if(itemId instanceof InsuranceInfo){
					InsuranceInfo insuranceInfo = (InsuranceInfo)itemId;
					insuranceInfo.setInsuranceName(table.getItem(itemId).getItemProperty("insuranceName").toString());
					insuranceService.updateInsurance((InsuranceInfo)itemId);
				}
			}
			table.setEditable(false);
			table.requestRepaint();
			tree.commit();
			tree.requestRepaint();
			
		}
		
		//编辑
		if(event.getSource().equals(button_edit)){
			if(table.isEditable() == false){
				table.setEditable(true);
			}
		}
		
		//删除
		if(event.getSource().equals(button_delete)){
			// 如果未选中任何列,提示用户
			if(selectedTableItems == null || selectedTableItems.size() == 0){
				getWindow().showNotification("请选择一行或者多行数据后再执行删除操作" ,"未选择数据");
				return;
			}
			for(Object itemId : selectedTableItems){
				if(itemId instanceof InsuranceInfo){
					InsuranceInfo insuranceInfo = (InsuranceInfo)itemId;
					insuranceService.deleteInsurance(insuranceInfo.getInsuranceID());
					//TODO also delete the tree node.
					tree.getContainerDataSource().removeItem(itemId);
					tree.requestRepaint();
				}
				if(itemId instanceof InsuranceDetailInfo){
					InsuranceDetailInfo InsuranceDetailInfo = (InsuranceDetailInfo)itemId;
					insuranceService.deleteInsuranceDetail(InsuranceDetailInfo.getInsuranceDetailID());
				}
				table.getContainerDataSource().removeItem(itemId);
			}
			selectedTableItems = null;
		}
		
	}
	
	private void fillInsuranceDetail(InsuranceDetailInfo insuranceDetailInfo){
		insuranceDetailInfo.setInsuranceDetailName(table.getItem(insuranceDetailInfo).getItemProperty("insuranceDetailName").toString());
		
		insuranceDetailInfo.setBase(Float.valueOf(table.getItem(insuranceDetailInfo).getItemProperty("base").toString()));
		insuranceDetailInfo.setCompanyRate(Float.valueOf(table.getItem(insuranceDetailInfo).getItemProperty("companyRate").toString()));
		insuranceDetailInfo.setPersonalRate(Float.valueOf(table.getItem(insuranceDetailInfo).getItemProperty("personalRate").toString()));
		
		
	}

	@Override
	public Action[] getActions(Object target, Object sender) {
		// TODO Auto-generated method stub
		//如果是在树上的操作
		if(sender == tree){
			//选中的是节点
			if (target instanceof TreeNodeInfo){
				return new Action[]{ACTION_ADD_TREENODE,ACTION_DELETE_TREENODE};
			}
			else
			{
				//return new Action[]{ACTION_DELETE_INSURANCE,ACTION_ADD_INSURANCE_DETAIL};
			}
		}
		return ACTIONS;
	}


	@Override
	public void handleAction(Action action, Object sender, Object target) {
		// TODO Auto-generated method stub
		//添加新节点
		if(action == ACTION_ADD_TREENODE){
			getWindow().showNotification("ACTION_ADD item: "+((TreeNodeInfo)target).getTreeNodeID() ,"modifiers");
			TreeNodeInfo treeNode = new TreeNodeInfo();
			treeNode.setTreeNodeName("新建节点");
			TreeNodeInfo parent = (TreeNodeInfo)target;
			treeNode.setParentID(parent.getTreeNodeID());
			treeNode.setItemTableName("INSURANCE");
			treeNodeService.addTreeNode(treeNode);
			tree.getContainerDataSource().addItem(treeNode);
			((HierarchicalContainer)tree.getContainerDataSource()).setParent(treeNode, parent);
		}
		//删除节点
		else if(action == ACTION_DELETE_TREENODE){
			getWindow().showNotification("ACTION_DELETE item: " ,"modifiers");
			TreeNodeInfo current = (TreeNodeInfo)target;
			treeNodeService.deleteTreeNode(current.getTreeNodeID());
			tree.removeItem(current);
		}
		//添加新保险
		if(action == ACTION_ADD_INSURANCE){
			InsuranceInfo insurance = new InsuranceInfo();
			insurance.setInsuranceName("新保险");
			TreeNodeInfo current = (TreeNodeInfo)target;
			insurance.setTreeNodeID(current.getTreeNodeID());
			insuranceService.addInsurance(insurance);
		}
		//删除保险
		else if (action == ACTION_DELETE_INSURANCE){
			InsuranceInfo current = (InsuranceInfo)target;
			insuranceService.deleteInsurance(current.getInsuranceID());
			tree.removeItem(current);
		}
		
		//添加保险明细
		tree.requestRepaint();
	}


	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// tree
		tree = new Tree();
		tree.setImmediate(false);
		tree.setWidth("220px");
		tree.setHeight("-1px");
		mainLayout.addComponent(tree);
		
		// verticalLayout_3
		verticalLayout_3 = buildVerticalLayout_3();
		mainLayout.addComponent(verticalLayout_3);
		mainLayout.setExpandRatio(verticalLayout_3, 1.0f);
		
		return mainLayout;
	}


	@AutoGenerated
	private VerticalLayout buildVerticalLayout_3() {
		// common part: create layout
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(false);
		verticalLayout_3.setWidth("-1px");
		verticalLayout_3.setHeight("-1px");
		verticalLayout_3.setMargin(false);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		verticalLayout_3.addComponent(horizontalLayout_2);
		
		// table
		table = new Table();
		table.setImmediate(false);
		table.setWidth("-1px");
		table.setHeight("-1px");
		verticalLayout_3.addComponent(table);
		verticalLayout_3.setExpandRatio(table, 1.0f);
		
		// horizontalLayout_3
		horizontalLayout_3 = buildHorizontalLayout_3();
		verticalLayout_3.addComponent(horizontalLayout_3);
		
		return verticalLayout_3;
	}


	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("-1px");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		
		// textField_name
		textField_name = new TextField();
		textField_name.setImmediate(false);
		textField_name.setWidth("-1px");
		textField_name.setHeight("-1px");
		textField_name.setSecret(false);
		horizontalLayout_2.addComponent(textField_name);
		
		// button_update_name
		button_update_name = new Button();
		button_update_name.setCaption("保存");
		button_update_name.setImmediate(true);
		button_update_name.setWidth("-1px");
		button_update_name.setHeight("-1px");
		horizontalLayout_2.addComponent(button_update_name);
		
		return horizontalLayout_2;
	}


	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_3() {
		// common part: create layout
		horizontalLayout_3 = new HorizontalLayout();
		horizontalLayout_3.setImmediate(false);
		horizontalLayout_3.setWidth("-1px");
		horizontalLayout_3.setHeight("-1px");
		horizontalLayout_3.setMargin(false);
		
		// button_add
		button_add = new Button();
		button_add.setCaption("+");
		button_add.setImmediate(true);
		button_add.setWidth("-1px");
		button_add.setHeight("-1px");
		horizontalLayout_3.addComponent(button_add);
		
		// button_delete
		button_delete = new Button();
		button_delete.setCaption("--");
		button_delete.setImmediate(true);
		button_delete.setWidth("-1px");
		button_delete.setHeight("-1px");
		horizontalLayout_3.addComponent(button_delete);
		
		// button_edit
		button_edit = new Button();
		button_edit.setCaption("编辑");
		button_edit.setImmediate(true);
		button_edit.setWidth("-1px");
		button_edit.setHeight("-1px");
		horizontalLayout_3.addComponent(button_edit);
		
		// button_save
		button_save = new Button();
		button_save.setCaption("保存");
		button_save.setImmediate(false);
		button_save.setWidth("-1px");
		button_save.setHeight("-1px");
		horizontalLayout_3.addComponent(button_save);
		
		return horizontalLayout_3;
	}


	

}
