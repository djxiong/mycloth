package com.hros.staffstate.vaadin;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.hros.customer.domain.Customer;
import com.hros.file.domain.File;
import com.hros.reccost.domain.RecCost;
import com.hros.staffstate.domain.Staff;
import com.hros.staffstate.domain.StaffState;
import com.hros.staffstate.service.StaffStateService;
import com.hros.staffstate.staffstatecomponent.FieldFactory;
import com.hros.staffstate.staffstatecomponent.MyButton;
import com.hros.staffstate.staffstatecomponent.MyForm;
import com.hros.staffstate.staffstatecomponent.MyTable;
import com.hros.staffstate.staffstatecomponent.MyTextField;
import com.hros.staffstate.vaadin.NewLayout.CustomerLabel;
import com.hros.staffstate.vaadin.NewLayout.Dict;
import com.hros.staffstate.vaadin.NewLayout.FileLabel;
import com.hros.staffstate.vaadin.NewLayout.InsuranceLabel;
import com.hros.staffstate.vaadin.NewLayout.ServiceFeeLabel;
import com.hros.staffstate.vaadin.NewLayout.StaffLabel;
import com.hros.staffstate.vaadin.NewLayout.UserLabel;
import com.hros.vaadin.SpringContextHelper;
import com.hros.vaadin.myComponent.MyDictComboBox;
import com.hros.vaadin.myComponent.MyGeneratorColumn;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public class Entry extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout;
	@AutoGenerated
	private Button queryButton;
	@AutoGenerated
	private Button addButton;
	@AutoGenerated
	private Button updateButton;
	@AutoGenerated
	private TextField textFieldName;
	@AutoGenerated
	private TextField textFieldIdCard;
	@AutoGenerated
	private TextField textFieldCus;
	@AutoGenerated
	private MyDictComboBox nativeSelectStatus;

	private BeanItem<StaffState> staffStateItem;
	private BeanItem<Staff> sItem;
	private BeanItem<Customer> cItem;
	private BeanItem<File> fItem;
	private BeanItem<RecCost> rItem;

	private TabSheet tabSheet;
	private MyTable myTable;
	private NewLayout newLayout;
	private MyForm staffForm;
	private MyForm staffStateForm;
	static MyForm customerForm;
	static MyForm fileForm;
	private MyForm recCostForm;

	private StaffStateService staffStateService;
	private Staff staff = new Staff();
	private StaffState state = new StaffState();
	static Customer customer = new Customer();
	static File file = new File();
	FieldFactory fieldFactory = new FieldFactory();
	private RecCost recCost = new RecCost();
	private Map<String, Object> map;

	public Entry() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		absoluteLayout = buildAbsoluteLayout();
		myTable = buildTable();
		tabSheet = buildTabSheet();

		newLayout = new NewLayout(absoluteLayout, myTable, tabSheet);
		mainLayout.addComponent(newLayout);

		return mainLayout;
	}

	@Override
	public void attach() {
		super.attach();
		SpringContextHelper sch = new SpringContextHelper(this.getApplication());
		staffStateService = (StaffStateService) sch
				.getBean("staffStateServiceImpl");
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout() {
		absoluteLayout = new AbsoluteLayout();
		absoluteLayout.setImmediate(false);
		absoluteLayout.setWidth("100.0%");
		absoluteLayout.setHeight("100.0%");
		absoluteLayout.setMargin(true);
		absoluteLayout
				.addComponent(buildQueryButton(), "top:5.0px;left:5.0px;");
		absoluteLayout.addComponent(buildAddButton(), "top:5.0px;left:65.0px;");
		absoluteLayout.addComponent(buildUpdateButton(),
				"top:5.0px;left:125.0px;");
		textFieldName = new MyTextField("姓名", "-1px", "-1px");
		absoluteLayout.addComponent(textFieldName, "top:50.0px;left:5.0px;");
		textFieldIdCard = new MyTextField("身份证", "-1px", "-1px");
		absoluteLayout
				.addComponent(textFieldIdCard, "top:50.0px;left:150.0px;");
		textFieldCus = new MyTextField("派遣单位", "-1px", "-1px");
		absoluteLayout.addComponent(textFieldCus, "top:50.0px;left:295.0px;");
		absoluteLayout.addComponent(buildNativeSelect(),
				"top:50.0px;left:440.0px;");
		return absoluteLayout;

	}

	@AutoGenerated
	private MyDictComboBox buildNativeSelect() {
		nativeSelectStatus = new MyDictComboBox("状态", "006");
		return nativeSelectStatus;

	}

	// 构建查询按钮
	private Button buildQueryButton() {
		queryButton = new MyButton("查询", "-1px", "-1px");
		queryButton.addListener(ClickEvent.class, this, "queryButton");
		return queryButton;
	}

	// 查询按钮事件
	public void queryButton() {
		addButton.setReadOnly(true);
		updateButton.setReadOnly(true);
		query();
	}

	// 查询
	private void query() {
		myTable.removeAllItems();
		List<StaffState> list;
		map = getSelectMap();
		if (!"006002".equals(nativeSelectStatus.getValue().toString())) {
			map.put("state", "006001");
			list = staffStateService.selectStaffState(map);
		} else {
			list = staffStateService.selectStaff(map);
		}
		myTable.setItems(list);
	}

	// 获取查询条件
	private Map<String, Object> getSelectMap() {
		map = new HashMap<String, Object>();
		map.put("staffName", textFieldName.getValue());
		map.put("identityCard", textFieldIdCard.getValue());
		map.put("custName", textFieldCus.getValue());
		return map;

	}

	private Button buildAddButton() {
		addButton = new MyButton("添加", "-1px", "-1px");
		addButton.setReadOnly(true);
		addButton.addListener(ClickEvent.class, this, "addButtonListener");
		return addButton;

	}

	// 添加按钮点击事件
	public void addButtonListener(ClickEvent event) {
		if (state.entryDate == null) {
			getWindow().showNotification("请输入入职时间");
			return;
		}
		customerForm.commit();
		fileForm.commit();
		staffForm.commit();

		Item item = myTable.getItem(myTable.getValue());
		item.getItemProperty("state").setValue("006001");
		item.getItemProperty("custID").setValue(customer.getCustID());
		item.getItemProperty("entryFileID").setValue(file.getFileID());
		staffStateForm.commit();
		recCostForm.commit();
		state.setUserId(1);
		state.setCustID(customer.getCustID());
		state.setEntryFileID(file.getFileID());
		state.setRecUserId(recCost.getRecUserId());
		state.setCostStartDate(recCost.getCostStartDate());
		state.setCostEndDate(recCost.getCostEndDate());
		state.setRecId(recCost.getRecId());
		staffStateService.addEntry(state);

		staff.setState("006001");
		staffStateService.updateState(staff);

		updateButton.setReadOnly(false);
		addButton.setReadOnly(true);
	}

	// 构建修改按钮
	private Button buildUpdateButton() {
		updateButton = new MyButton("修改", "-1px", "-1px");
		updateButton.setReadOnly(true);
		updateButton
				.addListener(ClickEvent.class, this, "updateButtonListener");
		return updateButton;
	}

	// 修改事件
	public void updateButtonListener() {
		customerForm.commit();
		fileForm.commit();
		staffForm.commit();
		Item item = myTable.getItem(myTable.getValue());
		item.getItemProperty("custID").setValue(customer.getCustID());
		item.getItemProperty("entryFileID").setValue(file.getFileID());
		staffStateForm.commit();
		recCostForm.commit();
		state.setCustID(customer.getCustID());
		state.setEntryFileID(file.getFileID());
		state.setRecUserId(recCost.getRecUserId());
		state.setCostStartDate(recCost.getCostStartDate());
		state.setCostEndDate(recCost.getCostEndDate());
		state.setRecId(recCost.getRecId());
		staffStateService.updateStaffState(state);
		
		
	}

	// 构建Table
	private MyTable buildTable() {
		myTable = new MyTable();
		BeanItemContainer<StaffState> beanItem = new BeanItemContainer<StaffState>(
				StaffState.class);
		Object[] obj = { "staffID", "身份证", "state", "custID", "post",
				"probation", "entryDate", "toPostDate", "agreeSignedDate",
				"agreeExpireDate", "agreeRenewDate", "insuranceID",
				"joinInsuranceDate", "insurancelInDate", "insurancelOutDate",
				"serviceFeeDelay", "userId", "entryFileID", "serviceFeeID" };
		String[] str = { "员工", "身份证", "状态", "客户", "岗位", "试用期", "入职时间", "到岗时间",
				"合同签订时间", "合同到期时间", "合同续签时间", "社保", "参保时间", "社保生效时间", "社保过期时间",
				"服务费生效延迟时间", "用户", "在职档案", "服务费" };
		myTable.setDateSource(beanItem);
		changeTableCloumn();
		myTable.setColumns(obj);
		myTable.setHeader(str);
		myTable.addListener(ValueChangeEvent.class, this, "valueChange");
		return myTable;

	}

	// 获取行值
	public void valueChange(ValueChangeEvent event) {
		state = (StaffState) myTable.getValue();
		if (state == null) {
			return;
		}
		if(state.getState().equals("006001")){
			List<Customer> clist = staffStateService.selectCustomerById(state
					.getCustID());
			customer = clist.get(0);
			customerForm.setValue(customer);
			
			List<File> flist = staffStateService.selectFileById(state
					.getEntryFileID());
			file = flist.get(0);
			fileForm.setValue(file);
			
			recCost.setRecId(state.getRecId());
			recCost.setRecUserId(state.getRecUserId());
			recCost.setCostStartDate(state.getCostStartDate());
			recCost.setCostEndDate(state.getCostEndDate());
			recCostForm.setValue(null);
			recCostForm.setValue(recCost);
		}
		
		List<Staff> slist = staffStateService.selectStaffById(state
				.getStaffID());
		staff = slist.get(0);
		staffForm.setValue(staff);
		staffStateForm.setValue(myTable.getItem(myTable.getValue()));
		if (staff.getState().equals("006001")) {
			updateButton.setReadOnly(false);
		} else {
			updateButton.setReadOnly(true);
			addButton.setReadOnly(false);
		}

	}

	// 改变Table字段
	private void changeTableCloumn() {
		myTable.addGeneratedColumn("staffID", new MyGeneratorColumn(
				StaffLabel.class));
		myTable.addGeneratedColumn("custID", new MyGeneratorColumn(
				CustomerLabel.class));
		myTable.addGeneratedColumn("身份证", new MyGeneratorColumn(
				StaffLabel.class));
		myTable.addGeneratedColumn("state", new MyGeneratorColumn(Dict.class));
		myTable.addGeneratedColumn("entryFileID", new MyGeneratorColumn(
				FileLabel.class));
		myTable.addGeneratedColumn("insuranceID", new MyGeneratorColumn(
				InsuranceLabel.class));
		myTable.addGeneratedColumn("serviceFeeID", new MyGeneratorColumn(
				ServiceFeeLabel.class));
		myTable.addGeneratedColumn("userId", new MyGeneratorColumn(
				UserLabel.class));

	}

	// 构建TabSheet
	private TabSheet buildTabSheet() {
		tabSheet = new TabSheet();
		tabSheet.setSizeFull();
		tabSheet.addTab(buildStaffForm(), "基本信息");
		tabSheet.addTab(buildStaffStateForm(), "入职信息");
		tabSheet.addTab(buildCustomerForm(), "客户信息");
		tabSheet.addTab(buildFileForm(), "档案信息");
		tabSheet.addTab(buildReccost(), "招聘信息");
		return tabSheet;

	}

	// 构建基本信息Form
	private MyForm buildStaffForm() {
		staffForm = new MyForm(2, 4);
		String[] str = { "staffName", "staffSex", "identityCard", "phone",
				"address", "homeAddress", "homePhone", "state" };
		sItem = new BeanItem<Staff>(staff);
		staffForm.setFactory(fieldFactory);
		staffForm.setDateSource(sItem);
		staffForm.setVisible(Arrays.asList(str));
		return staffForm;

	}

	// 构建入职信息Form
	private MyForm buildStaffStateForm() {
		staffStateForm = new MyForm(2, 1);
		String[] str = { "jobCode", "post", "probation", "entryDate",
				"toPostDate", "joinInsuranceDate", "insurancelInDate",
				"insurancelOutDate", "agreeSignedDate", "agreeExpireDate",
				"agreeRenewDate", "serviceFeeDelay", "insuranceID",
				"serviceFeeID" };
		staffStateItem = new BeanItem<StaffState>(state);
		staffStateForm.setFactory(fieldFactory);
		staffStateForm.setDateSource(staffStateItem);
		staffStateForm.setVisible(Arrays.asList(str));
		return staffStateForm;

	}

	// 构建客户信息Form
	private MyForm buildCustomerForm() {
		customerForm = new MyForm(2, 2);
		String[] str = { "custCode", "custName", "custLegalPerson", "address",
				"phone", "industry", "custClass", "custAttr", "custCity",
				"custType" };
		cItem = new BeanItem<Customer>(customer);
		customerForm.setFactory(fieldFactory);
		customerForm.setDateSource(cItem);
		customerForm.setVisible(Arrays.asList(str));
		Button bu = new Button("选择客户");
		bu.addListener(ClickEvent.class, this, "getCust");
		customerForm.getFooter().setMargin(false, true, true, true);
		customerForm.getFooter().addComponent(bu);
		return customerForm;

	}

	public void getCust(ClickEvent event) {
		getWindow().addWindow(new CustomerSelect());
	}

	// 构建档案信息Form
	private MyForm buildFileForm() {
		fileForm = new MyForm(2, 1);
		String[] str = { "fileCode", "fileName", "fileType", "fileDate",
				"fileUserID", "fileOutDate", "fileManagerID", "fileExamineID",
				"auditState", "electronicFile", "scanningElement",
				"fileLocation" };
		fItem = new BeanItem<File>(file);
		fileForm.setFactory(fieldFactory);
		fileForm.setDateSource(fItem);
		fileForm.setVisible(Arrays.asList(str));
		Button fileButton = new Button("选择档案");
		fileButton.addListener(ClickEvent.class, this, "getFile");
		fileForm.getFooter().setMargin(false, true, true, true);
		fileForm.getFooter().addComponent(fileButton);
		return fileForm;

	}

	public void getFile(ClickEvent event) {
		getWindow().addWindow(new FileSelect("入职档案选择"));
	}

	// 构建招聘信息From
	private MyForm buildReccost() {
		recCostForm = new MyForm(1, 3);
		String[] str = { "recUserId", "costStartDate", "recId" };
		rItem = new BeanItem<RecCost>(recCost);
		recCostForm.setFactory(fieldFactory);
		recCostForm.setDateSource(rItem);
		recCostForm.setVisible(Arrays.asList(str));
		return recCostForm;

	}
}
