package com.hros.staffstate.vaadin;


import java.util.Map;

import com.hros.bas.domain.DictInfo;
import com.hros.bas.service.DictService;
import com.hros.customer.domain.Customer;
import com.hros.file.domain.File;
import com.hros.insurance.domain.InsuranceInfo;
import com.hros.servicefee.domain.ServiceFee;
import com.hros.staffstate.domain.Staff;
import com.hros.staffstate.service.StaffStateService;
import com.hros.user.domain.UserInfo;
import com.hros.vaadin.SpringContextHelper;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.ObjectProperty;
import com.vaadin.terminal.Sizeable;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Form;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalSplitPanel;
import com.vaadin.ui.themes.Runo;

@SuppressWarnings("serial")
public class NewLayout extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private VerticalSplitPanel verticalSplitPanel;
	@AutoGenerated
	private HorizontalSplitPanel horizontalSplitPanel;
	@AutoGenerated
	private Table tableLeave;
	@AutoGenerated
	private Form formLeave;
	static DictService dictService;
	
	static Map<String, DictInfo> dictMap;
	static Map<Integer, Staff> staffMap;
	static Map<Integer, Customer> customerMap;
	static Map<Integer, File> fileMap;
	static Map<Integer,InsuranceInfo> insuranceMap;
	static Map<Integer, ServiceFee> serviceFeeMap;
	static Map<Integer,UserInfo> userMap;
	StaffStateService staffStateService;

	
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public NewLayout() {
	}

	public NewLayout(AbsoluteLayout al,Table table,TabSheet tabSheet) {
		buildMainLayout(al,table,tabSheet);
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}
 
	@AutoGenerated
	private AbsoluteLayout buildMainLayout(AbsoluteLayout al,Table table,TabSheet tabSheet) {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// verticalSplitPanel
		verticalSplitPanel = buildVerticalSplitPanel(al,table,tabSheet);
		mainLayout.addComponent(verticalSplitPanel, "top:0.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private VerticalSplitPanel buildVerticalSplitPanel(AbsoluteLayout al,Table table,TabSheet tabSheet) {
		// common part: create layout
		verticalSplitPanel = new VerticalSplitPanel();
		verticalSplitPanel.setImmediate(false);
		verticalSplitPanel.setWidth("100.0%");
		verticalSplitPanel.setHeight("100.0%");
		verticalSplitPanel.setMargin(false);
		verticalSplitPanel.setLocked(true);
		verticalSplitPanel.setSplitPosition(80, Sizeable.UNITS_PIXELS);
		verticalSplitPanel.setStyle(Runo.SPLITPANEL_SMALL);

		// absoluteLayout
		verticalSplitPanel.addComponent(al);

		// horizontalSplitPanel
		horizontalSplitPanel = buildHorizontalSplitPanel(table,tabSheet);
		verticalSplitPanel.addComponent(horizontalSplitPanel);

		return verticalSplitPanel;
	}



	@AutoGenerated
	private HorizontalSplitPanel buildHorizontalSplitPanel(Table table,TabSheet tabSheet) {
		horizontalSplitPanel = new HorizontalSplitPanel();
		horizontalSplitPanel.setImmediate(false);
		horizontalSplitPanel.setWidth("100.0%");
		horizontalSplitPanel.setHeight("100.0%");
		horizontalSplitPanel.setMargin(false);
		horizontalSplitPanel.setStyle(Runo.SPLITPANEL_SMALL);

		horizontalSplitPanel.addComponent(table);

		horizontalSplitPanel.addComponent(tabSheet);

		return horizontalSplitPanel;

	}

	@Override
	public void attach() {
		// TODO Auto-generated method stub
		super.attach();
		SpringContextHelper sch=new SpringContextHelper(this.getApplication());
		dictService = (DictService) sch.getBean("dictServiceImpl");
		staffStateService=(StaffStateService) sch.getBean("staffStateServiceImpl");
		dictMap = dictService.getAllDict();
		staffMap=staffStateService.selectStaffAll();
		customerMap=staffStateService.selectCustomerAll();
		fileMap=staffStateService.selectFileAll();
		insuranceMap=staffStateService.selectInsuranceAll();
		serviceFeeMap=staffStateService.selectServiceFeeAll();
		userMap=staffStateService.selectUserAll();
		
	}
	public static class Dict extends Label {
		public Dict(Table source, Object itemId, Object columnId) {
			Item item = source.getItem(itemId);
			String s = String.valueOf(item.getItemProperty(columnId).getValue());
			if (dictMap.containsKey(s)) {
				String name = dictMap.get(s).getDictName();
				setPropertyDataSource(new ObjectProperty<String>(name, String.class));
		        setContentMode(CONTENT_DEFAULT);
		        setWidth(100, UNITS_PERCENTAGE);
			}
		}
	}
	public static class StaffLabel extends Label{
		public StaffLabel(Table source, Object itemId, Object columnId){
			Item item = source.getItem(itemId);
			if(columnId.equals("…Ì∑›÷§")){
				int i=Integer.valueOf(item.getItemProperty("staffID").getValue().toString());
				if(staffMap.containsKey(i)){
					String name=staffMap.get(i).getIdentityCard();
					setPropertyDataSource(new ObjectProperty<String>(name, String.class));
				}
			
			}else {
				int i=Integer.valueOf(item.getItemProperty(columnId).getValue().toString());
				if(staffMap.containsKey(i)){
					String name=staffMap.get(i).getStaffName();
					setPropertyDataSource(new ObjectProperty<String>(name, String.class));
				}
			}
			setContentMode(CONTENT_DEFAULT);
	        setWidth(100, UNITS_PERCENTAGE);
			
		}
	}
	public static class CustomerLabel extends Label{
		public CustomerLabel(Table source, Object itemId, Object columnId){
			Item item = source.getItem(itemId);
			int i=Integer.valueOf(item.getItemProperty(columnId).getValue().toString());
			if(customerMap.containsKey(i)){
				String name=customerMap.get(i).getCustName();
				setPropertyDataSource(new ObjectProperty<String>(name, String.class));
		        setContentMode(CONTENT_DEFAULT);
		        setWidth(100, UNITS_PERCENTAGE);
			}
		}
	}
	
	public static class FileLabel extends Label{
		public FileLabel(Table source, Object itemId, Object columnId){
			Item item = source.getItem(itemId);
			int i=Integer.valueOf(item.getItemProperty(columnId).getValue().toString());
			if(fileMap.containsKey(i)){
				String name=fileMap.get(i).getFileLocation();
				setPropertyDataSource(new ObjectProperty<String>(name, String.class));
		        setContentMode(CONTENT_DEFAULT);
		        setWidth(100, UNITS_PERCENTAGE);
			}
		}
	}

	public static class InsuranceLabel extends Label{
		public InsuranceLabel(Table source, Object itemId, Object columnId){
			Item item=source.getItem(itemId);
			int i=Integer.valueOf(item.getItemProperty(columnId).getValue().toString());
			if(insuranceMap.containsKey(i)){
				String name=insuranceMap.get(i).getInsuranceName();
				setPropertyDataSource(new ObjectProperty<String>(name, String.class));
		        setContentMode(CONTENT_DEFAULT);
		        setWidth(100, UNITS_PERCENTAGE);
			}
		}
	}
	
	public static class ServiceFeeLabel extends Label{
		public ServiceFeeLabel(Table source, Object itemId, Object columnId){
			Item item=source.getItem(itemId);
			int i=Integer.valueOf(item.getItemProperty(columnId).getValue().toString());
			if(serviceFeeMap.containsKey(i)){
				String name=serviceFeeMap.get(i).getServiceFeeName();
				setPropertyDataSource(new ObjectProperty<String>(name, String.class));
		        setContentMode(CONTENT_DEFAULT);
		        setWidth(100, UNITS_PERCENTAGE);
			}
		}
	}
	
	public static class UserLabel extends Label{
		public UserLabel(Table source, Object itemId, Object columnId){
			Item item=source.getItem(itemId);
			int i=Integer.valueOf(item.getItemProperty(columnId).getValue().toString());
			if(userMap.containsKey(i)){
				String name=userMap.get(i).getUserName();
				setPropertyDataSource(new ObjectProperty<String>(name, String.class));
		        setContentMode(CONTENT_DEFAULT);
		        setWidth(100, UNITS_PERCENTAGE);
			}
		}
	}
}
