package com.hros.bas.vaadin;

import java.util.List;

import com.hros.bas.dao.MenuDao;
import com.hros.bas.domain.MenuInfo;
import com.hros.bas.service.MenuService;
import com.hros.vaadin.SpringContextHelper;
import com.hros.vaadin.myComponent.FieldAttr;
import com.hros.vaadin.myComponent.MyForm;
import com.hros.vaadin.myComponent.MyTree;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Form;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ChameleonTheme;
import com.vaadin.ui.themes.Runo;

@SuppressWarnings("serial")
public class MenuForm extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	
	private Panel leftMenuPanel;
	
	private MyTree menuTree;
	
	private MyForm menuForm;
	
	private HorizontalLayout topButtonLayout;
	
	private HorizontalLayout bottomLayout;
	
	private MenuService menuService;
	
	Button btnAddNode = new Button("添加菜单");
	Button btnAddNodeNext = new Button("添加下级菜单");
	Button btnDelete = new Button("删除菜单");

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private MenuInfo menu;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MenuForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		buildMenuTree();
		createMenuForm();
	}
	
	//创建menu对象的form
	public void createMenuForm() {
		menu = new MenuInfo();
		BeanItem<MenuInfo> menuItem = new BeanItem<MenuInfo>(menu);
		menuForm = new MyForm();
		menuForm.setCaption("菜单设置");
		menuForm.getFieldMap().put("menuName", new FieldAttr("菜单名称", "", 0));
		menuForm.getFieldMap().put("winClass", new FieldAttr("关联的类名(全路径)", "", 200));
		menuForm.getFieldMap().put("isShow", new FieldAttr("是否显示", "", 0));
		menuForm.getFieldMap().put("seq", new FieldAttr("排序", "", 0));
		menuForm.setItemDataSource(menuItem);
		menuForm.setVisibleItemProperties("menuName,winClass,isShow,seq".split(","));
		menuForm.createBtnFoot();
		menuForm.getBtnOk().addListener(ClickEvent.class, this, "btnSaveClick");
		menuForm.getBtnCancel().addListener(ClickEvent.class, this, "btnCancelClick");
		bottomLayout.addComponent(menuForm);
		bottomLayout.setMargin(true);
	}
	
	public void btnSaveClick(ClickEvent event) {
		menuForm.commit();
		menuTree.updateNode(menu);
		menuService.saveMenu(menu);
		this.getWindow().showNotification("保存成功！");
	}
	
	public void btnCancelClick(ClickEvent event) {
		menuForm.discard();
	}
	
	private Panel buildMenuPanel(){
		Panel leftPanel = new Panel();
		leftPanel.setHeight("100%");
		leftPanel.setWidth("200px");
		leftPanel.setImmediate(false);
		leftPanel.setCaption("菜单列表");
		return leftPanel;
	}
	
	private void buildTopLayout(){
		topButtonLayout = new HorizontalLayout();
		topButtonLayout.setSpacing(true);
		topButtonLayout.setMargin(true,true, false, true);
		topButtonLayout.addComponent(btnAddNode);
		topButtonLayout.addComponent(btnAddNodeNext);
		topButtonLayout.addComponent(btnDelete);
		btnAddNode.addListener(ClickEvent.class,this,"addNode");
		btnAddNode.setStyleName(Runo.BUTTON_BIG);
		btnAddNodeNext.addListener(ClickEvent.class, this, "addNodeNext");
		btnDelete.addListener(ClickEvent.class, this, "deleteNode");
	}
	
	public void addNode(ClickEvent event){
		menuTree.addNode(new MenuInfo());
	}
	
	public void addNodeNext(ClickEvent event) {
		menuTree.addNodeNext(new MenuInfo());
	}
	
	public void deleteNode(ClickEvent event) {
		int i = menuTree.deleteNode();
		menuService.deleteMenu(i);
	}
	
	private void buildMenuTree(){
		menuTree = new MyTree();
//		menuTree.setStyleName(Runo.TREE_CONNECTORS);
		menuTree.setSizeFull();
		leftMenuPanel.addComponent(menuTree);
		menuTree.setImmediate(true);
		menuTree.addListener(ValueChangeEvent.class, this, "treeValueChange");
	}
	
	public void attach(){
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		menuService = (MenuService) help.getBean("menuServiceImpl");
		List list = getMenuList();
		menuTree.setDataSetList(list, "menuName", "menuID", "fMenuID");
	}
	
	//tree click event
	public void treeValueChange(){
		if (menuTree.getValue()!=null){
			menu = (MenuInfo) menuTree.getValue();
			menuForm.setValue(menu);
		}
	}
	
	private List<MenuInfo> getMenuList(){
		List<MenuInfo> list = menuService.getAllMenuList("com.hros.bas.domain.MenuInfo");
		return list;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		buildTopLayout();
		mainLayout.addComponent(topButtonLayout);
		bottomLayout = new HorizontalLayout();
		mainLayout.addComponent(bottomLayout);
		bottomLayout.setSpacing(true);
		leftMenuPanel = buildMenuPanel();
		bottomLayout.addComponent(leftMenuPanel);
		
		return mainLayout;
	}

}
