package com.hros.bas.vaadin;

import com.hros.bas.service.BaseService;
import com.hros.company.domain.Company;
import com.hros.vaadin.SpringContextHelper;
import com.hros.vaadin.myComponent.MyFactory;
import com.hros.vaadin.myComponent.MyForm;
import com.hros.vaadin.myComponent.MyTreeTable;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Form;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

/**
 * 用于菜单、数据字典、公司部门、员工、客户单位等各种基础信息的管理
 * @author pb
 *
 */
@SuppressWarnings("serial")
public class BaseObjectForm extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	
	private HorizontalLayout toolbarLayout;

	private Button btnAddNode;
	
	private Button btnAddNodeNext;
	
	private Button btnDelete;
	
	private HorizontalLayout middleLayout;

	private MyTreeTable middleTreeTable;
	
	private MyForm middleForm;
	
	private BaseService baseService;
	
	private String serviceName;
	
	public BaseObjectForm(String serviceName) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.serviceName = serviceName;
		// TODO add user code here
	}

	@AutoGenerated
	private void buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new VerticalLayout();
		mainLayout.addComponent(buildToolbarLayout());
		mainLayout.addComponent(buildMiddleLayout());
	}
	
	@Override
	public void attach() {
		super.attach();
		SpringContextHelper help = new SpringContextHelper(this.getApplication());
		baseService = (BaseService) help.getBean(serviceName);
		//treetable的bean
		middleTreeTable.addColumns(baseService.getBeanItem());
		//treetable的可见列
		middleTreeTable.setVisibleColumns(baseService.getTableVisibleColumns());
//		//table的表头
		middleTreeTable.setColumnHeaders(baseService.getTableHeaders());
		//form的bean
		middleForm.setItemDataSource(baseService.getBeanItem());
		//form的可见字段
		middleForm.setVisibleItemProperties(baseService.getFormVisibleItems());
		//form的各字段具体显示
		middleForm.setFormFieldFactory(new MyFactory(baseService.getFactoryMap()));
		//初始化form的字段
		middleForm.setValue(baseService.getBeanItem());
		//填充Tree的数据
		middleTreeTable.setTreeField(baseService.getFieldName());
		middleTreeTable.addItemsById(baseService.getTreeTableItems());
	}
	
	private HorizontalLayout buildToolbarLayout() {
		toolbarLayout = new HorizontalLayout();
		btnAddNode = new Button("添加同级");
		btnAddNodeNext = new Button("添加下级");
		btnDelete = new Button("删除");
		toolbarLayout.addComponent(btnAddNode);
		toolbarLayout.addComponent(btnAddNodeNext);
		toolbarLayout.addComponent(btnDelete);
		toolbarLayout.setSpacing(true);
		toolbarLayout.setMargin(true, true, false, true);
		btnAddNode.addListener(ClickEvent.class, this, "addNode");
		btnAddNodeNext.addListener(ClickEvent.class, this, "addNodeNext");
		btnDelete.addListener(ClickEvent.class, this, "deleteNode");
		return toolbarLayout;
	}

	public void addNode() {
		middleTreeTable.addNode(baseService.getBeanItem());
	}
	
	public void addNodeNext() {
		middleTreeTable.addNodeNext(baseService.getBeanItem());
	}
	
	public void deleteNode() {
		baseService.deleteNode(middleTreeTable.deleteNode());
	}
	
	private HorizontalLayout buildMiddleLayout() {
		middleLayout = new HorizontalLayout();
		middleLayout.setMargin(true);
		middleLayout.setSpacing(true);
		middleLayout.addComponent(buildMiddleTree());
		middleLayout.addComponent(buildMiddleForm());
		return middleLayout;
	}
	
	private MyTreeTable buildMiddleTree() {
		middleTreeTable = new MyTreeTable();
		middleTreeTable.setWidth("600px");
		middleTreeTable.setHeight("450px");
		middleTreeTable.addListener(ValueChangeEvent.class, this, "treeValueChange");
		return middleTreeTable;
	}
	
	public void treeValueChange(ValueChangeEvent event) {
		Property property = event.getProperty();
		if (property == middleTreeTable) {
            Item item = middleTreeTable.getItem(middleTreeTable.getValue());
            if (item != middleForm.getValue()) {
            	middleForm.setValue(item);
            }
        }
	}
	
	private MyForm buildMiddleForm() {
		middleForm = new MyForm();
		middleForm.createBtnFoot();
		middleForm.getBtnOk().addListener(ClickEvent.class, this, "btnSave");
		middleForm.getBtnCancel().addListener(ClickEvent.class, this, "btnCancel");
		return middleForm;
	}
	
	public void btnSave(ClickEvent event) {
		middleForm.commit();
		Object obj = baseService.saveNode(middleTreeTable.takeItemToObj(baseService.getBeanItem()));
		if (obj != null) {
			middleTreeTable.updateNode(obj);
			this.getWindow().showNotification("保存成功！");
		} else {
			this.getWindow().showNotification("保存失败，请联系管理员！");
		}
	}
	
	public void btnCancel(ClickEvent event) {
		middleForm.discard();
	}
}
